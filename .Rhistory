plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_glad_gtr$gsea_df$ID[c(2,3,6)],
show_gene = c('da', 'sc', 'emc', 'pros', 'esg', 'Dl', 'N', 'H', 'Su(H)', 'E(spl)malpha-HLH'))
gse_list <- list(scOE_gse_dutta, dadaOE_gse_dutta, daOE_gse_dutta, daKD_gse_dutta)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
# gse_list and conditions must have the same order
sets.as.factors <- c("ISC-only", "Progenitor", "EB-only", "EE-only",
"Absorptive", "EC-only", "Differentiation")
layerhm.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors,
cluster=TRUE, nsig.out = FALSE)
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p <- p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 25))
# save
pdf(file=file.path(figdir,'DuttaGSEA.pdf'),
width=5, height=4)
p
dev.off()
gse_list <- list(scOE_gse_dutta, dadaOE_gse_dutta, daOE_gse_dutta, daKD_gse_dutta)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
# gse_list and conditions must have the same order
sets.as.factors <- c("ISC-only", "Progenitor", "EB-only", "EE-only",
"Absorptive", "EC-only", "Differentiation")
layerhm.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors,
cluster=TRUE, nsig.out = FALSE)
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p <- p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 25))
p
# save
pdf(file=file.path(figdir,'DuttaGSEA.pdf'),
width=5, height=4)
p
dev.off()
gse_list <- list(scOE_gse_dutta, dadaOE_gse_dutta, daOE_gse_dutta, daKD_gse_dutta)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
# gse_list and conditions must have the same order
sets.as.factors <- c("ISC-only", "Progenitor", "EB-only", "EE-only",
"Absorptive", "EC-only", "Differentiation")
layerhm.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors,
cluster=TRUE, nsig.out = FALSE)
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p <- p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 25))
# save
pdf(file=file.path(figdir,'DuttaGSEA.pdf'),
width=5, height=4)
p
dev.off()
p
genes2show <- c('pros', 'poxn', 'mira', 'spdo', 'polo', 'cdk1', 'Myo31DF', 'ck', 'nub', 'sti', 'Mcm2', 'Orc2', 'Mcm7', 'Mcm5', 'aurB', 'Mcm6', 'Ndc80', 'PolE2', 'BubR1', 'betaTry', 'iotaTry', 'alphaTry', 'AstA', 'Mip', 'AstB', 'AstC', 'tk', 'dimm', 'tap', 'Dl', 'Poxn', 'Dh31')
pdf(file=file.path(figdir,'DuttaNESdada.pdf'),
width=6, height=4.5)
plotGSEA(dadaOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
dev.off()
pdf(file=file.path(figdir,'DuttaNESscute.pdf'),
width=6, height=4.5)
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
dev.off()
plotGSEA(dadaOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
plotGSEA(dadaOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = c("EE-only", "ISC-only"),
show_gene = genes2show)
gse_list <- list(scOE_gse_dutta, dadaOE_gse_dutta, daOE_gse_dutta, daKD_gse_dutta)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
# gse_list and conditions must have the same order
sets.as.factors <- c("ISC-only", "Progenitor", "EB-only", "EE-only",
"Absorptive", "EC-only", "Differentiation")
layerhm.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors,
cluster=TRUE, nsig.out = FALSE)
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p <- p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 25))
p
gladdir <- paste0(getwd(),'/resources/GLAD')
gladfiles <- paste(gladdir, list.files(gladdir), sep='/')
names(gladfiles) <- lapply (
gladfiles,
\(x) str_split(str_split(x, "GLAD_")[[1]][[2]], '_')[[1]][[1]] )
read.add <- function(csv, csvlist) {
df <- read.csv(csv)
df$term <- names(which(csvlist==csv))
return(df)
}
datas <- lapply(gladfiles, \(x) read.add(x, gladfiles))
glad_dataset <- do.call(rbind , c(datas, make.row.names=FALSE))
glad_dataset
substitutions <- c(' signaling pathway$'='',
'\\.'=' ',
'Co '='Co-',
'Non '='Non-',
'RTK| RTK'='',
"DNA "="DNA-",
"TNF "="TNF-",
"TGF "="TGF-",
' and '=' / ',
'transcription factor|Transcription factor'='TF',
':'='/',
'^HLH'='bHLH',
'^Basic'='b',
'\\|'='')
glad_dataset <- glad_dataset %>%
# remove 1-2-1 substitutions above
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) str_replace_all(x, substitutions))) %>%
# remove trailing spaces
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) str_replace_all(x, '  $| $', ''))) %>%
# start all strings with Uppercase
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) gsub(x, pattern="(^[[:lower:]])", replacement="\\U\\1", perl=TRUE))) %>%
# substitute empty strings for NAs
mutate_at(c('term', 'Sub.group', 'Sub.sub.group'), ~na_if(., ''))
View(glad_dataset %>% dplyr::select(term, Sub.group, Sub.sub.group) %>% distinct() %>% filter(term=='TF/DNA-binding'))
# major groups
glad_gmx <- glad_dataset %>%
dplyr::select(term, FBgn) %>%
dplyr::rename(gene = FBgn)
# subgroups
glad_sub_gmx <- refine_glad_by(glad_dataset, 'Sub.group')
glad_sub2_gmx <- refine_glad_by(glad_dataset, 'Sub.sub.group')
glad_sub2_gmx
glad_sub_gmx
# common parameters
GSEAparams <- list(
exponent = 1,
minGSSize = 1,
maxGSSize = 5000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea"
)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# scute overexpression
# rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
# scOE_gse_glad <- do.call(
#   GSEA, c(list(geneList=rank, nPermSimple = 1000000, TERM2GENE = glad_gmx), GSEAparams)
#   )
# saveRDS(scOE_gse_glad, 'output/scOE_gse_glad.RDS')
scOE_gse_glad <- readRDS('output/scOE_gse_glad.RDS')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 10000, TERM2GENE = glad_gmx), GSEAparams)
)
# common parameters
GSEAparams <- list(
exponent = 1,
minGSSize = 1,
maxGSSize = 5000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea"
)
# da knockdown
rank_dakd <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank_dakd, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da overexpression
rank_da <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank_da, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da:da overexpression
rank_dada <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank_dada, nPermSimple = 10000, TERM2GENE = glad_gmx), GSEAparams)
)
# scute overexpression
# rank_sc <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
# # nPermSimple = 1000000 is needed to detect anything
# scOE_gse_glad <- do.call(
#   GSEA, c(list(geneList=rank_sc, nPermSimple = 1000000, TERM2GENE = glad_gmx), GSEAparams)
#   )
# saveRDS(scOE_gse_glad, 'output/scOE_gse_glad.RDS')
scOE_gse_glad <- readRDS('output/scOE_gse_glad.RDS')
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
layerhm.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
layerhm.df <- layerhm.df %>%
filter(ID != 'Metabolic vs2')
layerhm.df$ID <- forcats::fct_drop(layerhm.df$ID, only = 'Metabolic vs2')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 120))
ggsave(file.path(figdir,'GSEA_GLAD1.pdf'))
daKD_gse_gladsub   <- subglad_gsea(DaKD_deg, glad_sub_gmx)
daOE_gse_gladsub   <- subglad_gsea(DaOE_deg, glad_sub_gmx)
dadaOE_gse_gladsub <- subglad_gsea(DaDaOE_deg, glad_sub_gmx)
# scOE_gse_gladsub   <- subglad_gsea(ScOE_deg, glad_sub_gmx, perms=100000)
# saveRDS(scOE_gse_gladsub, 'output/scOE_gse_gladsub.RDS')
scOE_gse_gladsub <- readRDS('output/scOE_gse_gladsub.RDS')
# we are not interested in Human Disease genes now
scOE_gse_gladsub['Human Disease'] <- NULL
daKD_gse_gladsub
glad_sub_gmx
names(glad_sub_gmx)
glad_sub_gmx$`Major signaling pathways`
head(glad_sub_gmx$`Major signaling pathways`)
subglad_gsea(DaKD_deg, glad_sub_gmx$`Major signaling pathways`)
subglad_gsea(DaKD_deg, dplyr::select(glad_sub_gmx, `Major signaling pathways`))
glad_sub_gmx[`Major signaling pathways`]
glad_sub_gmx['Major signaling pathways']
subglad_gsea(DaKD_deg, glad_sub_gmx['Major signaling pathways'])
daKD_gse_gladsub   <- subglad_gsea(DaKD_deg, glad_sub_gmx['Major signaling pathways'])
daOE_gse_gladsub   <- subglad_gsea(DaOE_deg, glad_sub_gmx['Major signaling pathways'])
dadaOE_gse_gladsub <- subglad_gsea(DaDaOE_deg, glad_sub_gmx['Major signaling pathways'])
scOE_gse_gladsub   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'])
# saveRDS(scOE_gse_gladsub, 'output/scOE_gse_gladsub.RDS')
# scOE_gse_gladsub <- readRDS('output/scOE_gse_gladsub.RDS')
# we are not interested in Human Disease genes now
#scOE_gse_gladsub['Human Disease'] <- NULL
daKD_gse_sigpath   <- subglad_gsea(DaKD_deg, glad_sub_gmx['Major signaling pathways'])
daOE_gse_sigpath   <- subglad_gsea(DaOE_deg, glad_sub_gmx['Major signaling pathways'])
dadaOE_gse_sigpath <- subglad_gsea(DaDaOE_deg, glad_sub_gmx['Major signaling pathways'])
scOE_gse_sigpath   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'])
scOE_gse_sigpath
scOE_gse_sigpath['Major signaling pathways']
scOE_gse_sigpath$`Major signaling pathways`
gse_list <- list(scOE_gse_sigpath$`Major signaling pathways`,
dadaOE_gse_sigpath$`Major signaling pathways`,
daOE_gse_sigpath$`Major signaling pathways`,
daKD_gse_sigpath$`Major signaling pathways`)
# `conditions` were defined further above
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`)
layerhm.df <- gseCP_summarise(glad_sub_gmx$`Major signaling pathways`,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
subt <- "for GLAD signalling pathways (Hu et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
layerhm.df <- gseCP_summarise(glad_sub_gmx$`Major signaling pathways`,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
layerhm.df
layerhm.df <- gseCP_summarise(glad_sub_gmx['Major signaling pathways'],
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
sets.as.factors
scOE_gse_sigpath$`Major signaling pathways`
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
glad_sub_gmx
glad_sub_gmx$`Major signaling pathways`
v
sets.as.factors
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`$term)
sets.as.factors
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
layerhm.df
gse_list <- list(scOE_gse_sigpath$`Major signaling pathways`,
dadaOE_gse_sigpath$`Major signaling pathways`,
daOE_gse_sigpath$`Major signaling pathways`,
daKD_gse_sigpath$`Major signaling pathways`)
# `conditions` were defined further above
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`$term)
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
subt <- "for GLAD signalling pathways (Hu et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 120))
scOE_gse_sigpath   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'], nPermSimple = 10000)
scOE_gse_sigpath   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'], n = 10000)
scOE_gse_sigpath   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'], perm = 10000)
gse_list <- list(scOE_gse_sigpath$`Major signaling pathways`,
dadaOE_gse_sigpath$`Major signaling pathways`,
daOE_gse_sigpath$`Major signaling pathways`,
daKD_gse_sigpath$`Major signaling pathways`)
# `conditions` were defined further above
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`$term)
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = TRUE, nsig.out = TRUE)
gse_list <- list(scOE_gse_sigpath$`Major signaling pathways`,
dadaOE_gse_sigpath$`Major signaling pathways`,
daOE_gse_sigpath$`Major signaling pathways`,
daKD_gse_sigpath$`Major signaling pathways`)
# `conditions` were defined further above
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`$term)
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = FALSE, nsig.out = TRUE)
subt <- "for GLAD signalling pathways (Hu et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 120))
daKD_gse_sigpath   <- subglad_gsea(DaKD_deg, glad_sub_gmx['Major signaling pathways'], perm = 10000)
daOE_gse_sigpath   <- subglad_gsea(DaOE_deg, glad_sub_gmx['Major signaling pathways'], perm = 10000)
dadaOE_gse_sigpath <- subglad_gsea(DaDaOE_deg, glad_sub_gmx['Major signaling pathways'], perm = 10000)
scOE_gse_sigpath   <- subglad_gsea(ScOE_deg, glad_sub_gmx['Major signaling pathways'], perm = 10000)
gse_list <- list(scOE_gse_sigpath$`Major signaling pathways`,
dadaOE_gse_sigpath$`Major signaling pathways`,
daOE_gse_sigpath$`Major signaling pathways`,
daKD_gse_sigpath$`Major signaling pathways`)
# `conditions` were defined further above
sets.as.factors <- unique(glad_sub_gmx$`Major signaling pathways`$term)
layerhm.df <- gseCP_summarise(glad_sub_gmx,
gse_list, conditions, sets.as.factors,
cluster = FALSE, nsig.out = TRUE)
subt <- "for GLAD signalling pathways (Hu et al., 2015)"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 120))
ensembl <- useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org")
attributes <- listAttributes(ensembl)
ezlist <- getBM(attributes=c('entrezgene_id', 'ensembl_gene_id', 'external_gene_name'), mart = ensembl)
ezlist <- drop_na(ezlist)
kegg.sets.dme <- kegg.gsets(species='dme', id.type='entrez')
# separate sig.naling vs met.abolic pathways and tidy
kegg.sig_tidy <- NULL
KSIG <- kegg.sets.dme$kg.sets[kegg.sets.dme$sig.idx]
for ( x in 1:length(KSIG) ) {
df <- data.frame(gene = KSIG[[x]])
df$term <- names(KSIG)[[x]]
kegg.sig_tidy <- rbind(kegg.sig_tidy, dplyr::select(df, term, gene))
}
# split term names into KEGG ID and description
kegg.sig_tidy <- kegg.sig_tidy %>%
separate_wider_delim(term, ' ', names = c('term', 'description'),
too_many = 'merge')
# show
kegg.sig_tidy[as.integer(seq(from=1, to=nrow(kegg.sig_tidy), length.out = 10)),]
# separate sig.naling vs met.abolic pathways and tidy
kegg.met_tidy <- NULL
KMET <- kegg.sets.dme$kg.sets[kegg.sets.dme$met.idx]
for ( x in 1:length(KMET) ) {
df <- data.frame(gene = KMET[[x]])
df$term <- names(KMET)[[x]]
kegg.met_tidy <- rbind(kegg.met_tidy, dplyr::select(df, term, gene))
}
# split term names into KEGG ID and description
kegg.met_tidy <- kegg.met_tidy %>%
separate_wider_delim(term, ' ', names = c('term', 'description'),
too_many = 'merge')
kegg.met_tidy[as.integer(seq(from=1, to=nrow(kegg.met_tidy), length.out = 10)),]
# common parameters
kegg.sig_gmx <- kegg.sig_tidy %>% dplyr::select(description, gene)
names(kegg.sig_gmx) <- c('term', 'gene')
GSEAparams_sig <- list(exponent = 1, minGSSize = 1, maxGSSize = 5000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = kegg.sig_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
kegg.met_gmx <- kegg.met_tidy %>% dplyr::select(description, gene)
names(kegg.met_gmx) <- c('term', 'gene')
GSEAparams_met <- list(exponent = 1, minGSSize = 1, maxGSSize = 5000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = kegg.met_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# create rank with ncbi-geneid keys instead of gene symbols
daKD_rank <- make_degrank(DaKD_deg, mode='log2fc', key='gene_symbol')
daKD_kegg_rank <- daKD_rank
names(daKD_kegg_rank) <- ezlist[match(names(daKD_rank), ezlist$external_gene_name), 'entrezgene_id']
# some names will be NA because they are not in the NCBI db (?), so to filter them:
daKD_kegg_rank <- daKD_kegg_rank[-na.action(na.omit(names(daKD_kegg_rank)))]
# now we can do the GSEA safely
daKD_gse_ksig   <- do.call(GSEA, c(list(geneList=daKD_kegg_rank),   GSEAparams_sig))
daKD_gse_kmet   <- do.call(GSEA, c(list(geneList=daKD_kegg_rank),   GSEAparams_met))
# prep
daOE_rank <- make_degrank(DaOE_deg, mode='log2fc', key='gene_symbol')
daOE_kegg_rank <- daOE_rank
names(daOE_kegg_rank) <- ezlist[match(names(daOE_rank), ezlist$external_gene_name), 'entrezgene_id']
daOE_kegg_rank <- daOE_kegg_rank[-na.action(na.omit(names(daOE_kegg_rank)))]
# GSEA
daOE_gse_ksig   <- do.call(GSEA, c(list(geneList=daOE_kegg_rank),   GSEAparams_sig))
daOE_gse_kmet   <- do.call(GSEA, c(list(geneList=daOE_kegg_rank),   GSEAparams_met))
#prep
dadaOE_rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='gene_symbol')
dadaOE_kegg_rank <- dadaOE_rank
names(dadaOE_kegg_rank) <- ezlist[match(names(dadaOE_rank), ezlist$external_gene_name), 'entrezgene_id']
dadaOE_kegg_rank <- dadaOE_kegg_rank[-na.action(na.omit(names(dadaOE_kegg_rank)))]
# GSEA
dadaOE_gse_ksig <- do.call(GSEA, c(list(geneList=dadaOE_kegg_rank), GSEAparams_sig))
dadaOE_gse_kmet <- do.call(GSEA, c(list(geneList=dadaOE_kegg_rank), GSEAparams_met))
#prep
scOE_rank <- make_degrank(ScOE_deg, mode='log2fc', key='gene_symbol')
scOE_kegg_rank <- scOE_rank
names(scOE_kegg_rank) <- ezlist[match(names(scOE_rank), ezlist$external_gene_name), 'entrezgene_id']
scOE_kegg_rank <- scOE_kegg_rank[-na.action(na.omit(names(scOE_kegg_rank)))]
# GSEA
scOE_gse_ksig   <- do.call(GSEA, c(list(geneList=scOE_kegg_rank),   GSEAparams_sig))
scOE_gse_kmet   <- do.call(GSEA, c(list(geneList=scOE_kegg_rank),   GSEAparams_met))
gse_list <- list(scOE_gse_ksig, dadaOE_gse_ksig, daOE_gse_ksig, daKD_gse_ksig)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
sets.as.factors <- unique(kegg.sig_tidy$description)
layerhm.df <- gseCP_summarise(kegg.sig_gmx, gse_list, conditions, sets.as.factors, cluster=TRUE, nsig.out = TRUE)
subt <- "for KEGG *signaling* pathways"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 200))
gse_list <- list(scOE_gse_kmet, dadaOE_gse_kmet, daOE_gse_kmet, daKD_gse_kmet)
# `conditions` were defined further above
sets.as.factors <- unique(kegg.met_tidy$description)
layerhm.df <- gseCP_summarise(kegg.met_gmx, gse_list, conditions, sets.as.factors, cluster=TRUE, nsig.out = TRUE)
subt <- "for KEGG *metabolic* pathways"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 200))
ggsave(file.path(figdir, 'metabolicKEGG.pdf'))
gse_list <- list(scOE_gse_kmet, dadaOE_gse_kmet, daOE_gse_kmet, daKD_gse_kmet)
# `conditions` were defined further above
sets.as.factors <- unique(kegg.met_tidy$description)
layerhm.df <- gseCP_summarise(kegg.met_gmx, gse_list, conditions, sets.as.factors, cluster=TRUE, nsig.out = TRUE)
subt <- "for KEGG *metabolic* pathways"
p <- layer.heatmap(layerhm.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 200))
ggsave(file.path(figdir, 'metabolicKEGG.pdf'))
path.ids <- kegg.met_tidy %>%
dplyr::select(term, description) %>%
distinct()
path.ids
View(path.ids)
# fixed parameters
fixed <- list(
low = list(gene = cet_pal(3, name='cbd1')[1], cpd = "blue"),
mid = list(gene = cet_pal(3, name='cbd1')[2], cpd = "gray"),
high = list(gene = cet_pal(3, name='cbd1')[3], cpd = "yellow"),
species = "dme",
kegg.dir = figdir,
new.signature=FALSE,
res = 600)
(path.ids %>% filter(description == 'Oxidative phosphorylation'))$term
params <- c(
list(gene.data = cbind(daKD_rank, dadaOE_rank = dadaOE_rank[names(daKD_rank)]),
pathway.id = "dme00190",
out.suffix = "daRNAi_dada",
gene.idtype = 'SYMBOL',
limit = list(gene=1, cpd=1)
),
fixed)
handled_pathview(params)
pathid <- (path.ids %>% filter(description == 'Metabolic pathways'))$term
params <- c(
list(gene.data = cbind(daKD_rank, dadaOE_rank = dadaOE_rank[names(daKD_rank)]),
pathway.id = pathid,
out.suffix = "daRNAi_dada",
gene.idtype = 'SYMBOL',
limit = list(gene=1, cpd=1)
),
fixed)
handled_pathview(params)
pathid <- (path.ids %>% filter(description == 'Drug metabolism - cytochrome P450'))$term
params <- c(
list(gene.data = cbind(daKD_rank, dadaOE_rank = dadaOE_rank[names(daKD_rank)]),
pathway.id = pathid,
out.suffix = "daRNAi_dada",
gene.idtype = 'SYMBOL',
limit = list(gene=1, cpd=1)
),
fixed)
handled_pathview(params)
pathid <- (path.ids %>% filter(description == 'Carbon metabolism'))$term
params <- c(
list(gene.data = cbind(daKD_rank, dadaOE_rank = dadaOE_rank[names(daKD_rank)]),
pathway.id = pathid,
out.suffix = "daRNAi_dada",
gene.idtype = 'SYMBOL',
limit = list(gene=1, cpd=1)
),
fixed)
handled_pathview(params)
