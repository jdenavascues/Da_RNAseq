sortedFinalData <- finalData[order(finalData$pvalue), ]
sortedFinalData_named <- merge(sortedFinalData, dlist, by=0)
sortedFinalData_named <- sortedFinalData_named[,-1]
# Write data to file
write.table(sortedFinalData, file=paste("output/daoekd/differential_expression/", conditionOne, "_vs_", conditionTwo, ".txt", sep=""), row.names=F, sep="\t", quote=F)
# Get significant genes, because we want to cluster on this behaviour
significantGenes <- as.vector(unlist(subset(sortedFinalData_named, pvalue <= 0.05, select=c("ensemblGeneID"))))
sigTpmNormalisedCounts <- subset(tpmNormalisedCounts, rownames(tpmNormalisedCounts) %in% significantGenes)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(ggplot2)
library(ggthemes) # italics in the figures
library(ggtext) # italics in the figures
library(pheatmap)        # to plot heatmap
library(here); setwd(here())
# get the data (fresh session)
targets <- read.table("resources/targets_daoekd.txt", header=TRUE, sep="\t")
tpmNormalisedCounts <- readRDS('daoekd_counts.RDS')
# remove all rows that have no variance
tpmNormalisedCounts_pca <- tpmNormalisedCounts[
rowSums(tpmNormalisedCounts[-1] != tpmNormalisedCounts[[2]], na.rm = TRUE) != 0,
]
pca <- prcomp(t(tpmNormalisedCounts), center=TRUE, scale=TRUE)
tpmNormalisedCounts
head(tpmNormalisedCounts)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
library(ggplot2)         # for making QC plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
targets <- read.table("resources/targets_daoekd.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- targets$sampleID
rownames(rawData) <- fileContents$Geneid
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition)
exptObject <- DESeqDataSetFromMatrix(
countData = rawData,
colData = exptDesign,
design = ~ condition)
# Transform the normalized counts
vsd_Object <- vst(exptObject, blind=TRUE)
# Extract the matrix of transformed counts
vsd_mat_Object <- assay(vsd_Object)
# Compute the correlation values between samples
vsd_cor_Object <- cor(vsd_mat_Object)
# Plot the heatmap
pheatmap(vsd_cor_Object, annotation = select(exptDesign, condition))
analysisObject = DESeq(exptObject)
plotDispEsts(analysisObject)
rawCounts <- as.data.frame(counts(analysisObject, normalized=FALSE))
normalisedCounts <- as.data.frame(counts(analysisObject, normalized=TRUE))
rawDataWithLengths <- merge(allGeneLengths, rawCounts, by.x="gene_id", by.y="row.names", all=T)
rawCountData <- rawDataWithLengths[,colnames(rawCounts)]
rownames(rawCountData) <- rawDataWithLengths[,1]
tpmData <- NULL
for (colName in colnames(rawCountData)) {
tpmData <- cbind(tpmData, tpm(rawDataWithLengths[,colName], rawDataWithLengths$max.tx_len))
}
tpmData <- as.data.frame(tpmData)
colnames(tpmData) <- colnames(rawCounts)
rownames(tpmData) <- rawDataWithLengths[,1]
tpmNormalisedCounts <- tpmData[match(rownames(rawCounts), rownames(tpmData)), ]
if (!identical(rownames(rawCounts), rownames(normalisedCounts))) {
stop()
}
if (!identical(rownames(tpmNormalisedCounts), rownames(normalisedCounts))) {
stop()
}
saveRDS(tpmNormalisedCounts, 'daoekd_counts.RDS')
conditionOne <- 'Control'
conditionTwo <- 'DaKD'
# slimRawCounts <- dplyr::select(rawCounts, matches( paste(conditionOne,conditionTwo, sep = "|")  ) )
# slimNormalisedCounts <- dplyr::select(normalisedCounts, matches( paste(conditionOne,conditionTwo, sep = "|")  ) )
# slimTpmNormalisedCounts <- dplyr::select(tpmNormalisedCounts, matches( paste(conditionOne,conditionTwo, sep = "|")  ) )
#
# colnames(slimRawCounts) <- paste("raw", colnames(slimRawCounts), sep=".")
# colnames(slimNormalisedCounts) <- paste("norm", colnames(slimNormalisedCounts), sep=".")
# colnames(slimTpmNormalisedCounts) <- paste("tpm", colnames(slimTpmNormalisedCounts), sep=".")
# these lines do not work, I don't know why
# it seems that the `select` function is meant to find colnames in rawCounts that match the conditions
# but then there would be repeated colnames
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleID
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
slimNormalisedCounts    <- normalisedCounts    %>% select(all_of(conditions_sampleIDs))
slimTpmNormalisedCounts <- tpmNormalisedCounts %>% select(all_of(conditions_sampleIDs))
colnames(slimRawCounts)           <- paste("raw", conditions_sampleIDs, sep=".")
colnames(slimNormalisedCounts)    <- paste("norm", conditions_sampleIDs, sep=".")
colnames(slimTpmNormalisedCounts) <- paste("tpm", conditions_sampleIDs, sep=".")
deData <- as.data.frame(results(analysisObject, contrast=c("condition", conditionOne, conditionTwo), pAdjustMethod="BH"))
finalData <- cbind(rownames(deData), slimRawCounts, slimNormalisedCounts, slimTpmNormalisedCounts, deData)
colnames(finalData)[1] <- "ensemblGeneID"
sortedFinalData <- finalData[order(finalData$pvalue), ]
sortedFinalData_named <- merge(sortedFinalData, dlist, by=0)
sortedFinalData_named <- sortedFinalData_named[,-1]
write.table(sortedFinalData, file=paste("output/daoekd/differential_expression/", conditionOne, "_vs_", conditionTwo, ".txt", sep=""), row.names=F, sep="\t", quote=F)
significantGenes <- as.vector(unlist(subset(sortedFinalData_named, pvalue <= 0.05, select=c("ensemblGeneID"))))
sigTpmNormalisedCounts <- subset(tpmNormalisedCounts, rownames(tpmNormalisedCounts) %in% significantGenes)
conditionOne <- 'Control'
conditionTwo <- 'DaOE'
# Select the relevant column from the counts object made previously.
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleID
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
slimNormalisedCounts    <- normalisedCounts    %>% select(all_of(conditions_sampleIDs))
slimTpmNormalisedCounts <- tpmNormalisedCounts %>% select(all_of(conditions_sampleIDs))
colnames(slimRawCounts)           <- paste("raw", conditions_sampleIDs, sep=".")
colnames(slimNormalisedCounts)    <- paste("norm", conditions_sampleIDs, sep=".")
colnames(slimTpmNormalisedCounts) <- paste("tpm", conditions_sampleIDs, sep=".")
# Create data.frame containing count and DEdata, sorted (increasing) by pvalue
deData <- as.data.frame(results(analysisObject, contrast=c("condition", conditionOne, conditionTwo), pAdjustMethod="BH"))
finalData <- cbind(rownames(deData), slimRawCounts, slimNormalisedCounts, slimTpmNormalisedCounts, deData)
colnames(finalData)[1] <- "ensemblGeneID"
# Sort data and give genes their names
sortedFinalData <- finalData[order(finalData$pvalue), ]
sortedFinalData_named <- merge(sortedFinalData, dlist, by=0)
sortedFinalData_named <- sortedFinalData_named[,-1]
# Write data to file
write.table(sortedFinalData, file=paste("output/daoekd/differential_expression/", conditionOne, "_vs_", conditionTwo, ".txt", sep=""), row.names=F, sep="\t", quote=F)
# Get significant genes, because we want to cluster on this behaviour
significantGenes <- as.vector(unlist(subset(sortedFinalData_named, pvalue <= 0.05, select=c("ensemblGeneID"))))
sigTpmNormalisedCounts <- subset(tpmNormalisedCounts, rownames(tpmNormalisedCounts) %in% significantGenes)
targets <- read.table("resources/targets_dadasc.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- targets$sampleID
rownames(rawData) <- fileContents$Geneid
# filter by cpm
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
# Create a DeSEQ2 design matrix
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition)
# Create a DeSEQ2 experimental object
exptObject <- DESeqDataSetFromMatrix(
countData = rawData,
colData = exptDesign,
design = ~ condition)
# Transform the normalized counts
vsd_Object <- vst(exptObject, blind=TRUE)
# Extract the matrix of transformed counts
vsd_mat_Object <- assay(vsd_Object)
# Compute the correlation values between samples
vsd_cor_Object <- cor(vsd_mat_Object)
# Plot the heatmap
pheatmap(vsd_cor_Object, annotation = select(exptDesign, condition))
analysisObject = DESeq(exptObject)
plotDispEsts(analysisObject)
rawCounts <- as.data.frame(counts(analysisObject, normalized=FALSE))
normalisedCounts <- as.data.frame(counts(analysisObject, normalized=TRUE))
rawDataWithLengths <- merge(allGeneLengths, rawCounts, by.x="gene_id", by.y="row.names", all=T)
rawCountData <- rawDataWithLengths[,colnames(rawCounts)]
rownames(rawCountData) <- rawDataWithLengths[,1]
tpmData <- NULL
for (colName in colnames(rawCountData)) {
tpmData <- cbind(tpmData, tpm(rawDataWithLengths[,colName], rawDataWithLengths$max.tx_len))
}
tpmData <- as.data.frame(tpmData)
colnames(tpmData) <- colnames(rawCounts)
rownames(tpmData) <- rawDataWithLengths[,1]
tpmNormalisedCounts <- tpmData[match(rownames(rawCounts), rownames(tpmData)), ]
if (!identical(rownames(rawCounts), rownames(normalisedCounts))) {
stop()
}
if (!identical(rownames(tpmNormalisedCounts), rownames(normalisedCounts))) {
stop()
}
saveRDS(tpmNormalisedCounts, 'dadasc_counts.RDS')
conditionOne <- 'Control'
conditionTwo <- 'DaDaOE'
# Select the relevant column from the counts object made previously.
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleID
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
slimNormalisedCounts    <- normalisedCounts    %>% select(all_of(conditions_sampleIDs))
slimTpmNormalisedCounts <- tpmNormalisedCounts %>% select(all_of(conditions_sampleIDs))
colnames(slimRawCounts)           <- paste("raw", conditions_sampleIDs, sep=".")
colnames(slimNormalisedCounts)    <- paste("norm", conditions_sampleIDs, sep=".")
colnames(slimTpmNormalisedCounts) <- paste("tpm", conditions_sampleIDs, sep=".")
# Create data.frame containing count and DEdata, sorted (increasing) by pvalue
deData <- as.data.frame(results(analysisObject, contrast=c("condition", conditionOne, conditionTwo), pAdjustMethod="BH"))
finalData <- cbind(rownames(deData), slimRawCounts, slimNormalisedCounts, slimTpmNormalisedCounts, deData)
colnames(finalData)[1] <- "ensemblGeneID"
# Sort data and give genes their names
sortedFinalData <- finalData[order(finalData$pvalue), ]
sortedFinalData_named <- merge(sortedFinalData, dlist, by=0)
sortedFinalData_named <- sortedFinalData_named[,-1]
# Write data to file
write.table(sortedFinalData, file=paste("output/daoekd/differential_expression/", conditionOne, "_vs_", conditionTwo, ".txt", sep=""), row.names=F, sep="\t", quote=F)
# Get significant genes, because we want to cluster on this behaviour
significantGenes <- as.vector(unlist(subset(sortedFinalData_named, pvalue <= 0.05, select=c("ensemblGeneID"))))
sigTpmNormalisedCounts <- subset(tpmNormalisedCounts, rownames(tpmNormalisedCounts) %in% significantGenes)
conditionOne <- 'Control'
conditionTwo <- 'ScOE'
# Select the relevant column from the counts object made previously.
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleID
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
slimNormalisedCounts    <- normalisedCounts    %>% select(all_of(conditions_sampleIDs))
slimTpmNormalisedCounts <- tpmNormalisedCounts %>% select(all_of(conditions_sampleIDs))
colnames(slimRawCounts)           <- paste("raw", conditions_sampleIDs, sep=".")
colnames(slimNormalisedCounts)    <- paste("norm", conditions_sampleIDs, sep=".")
colnames(slimTpmNormalisedCounts) <- paste("tpm", conditions_sampleIDs, sep=".")
# Create data.frame containing count and DEdata, sorted (increasing) by pvalue
deData <- as.data.frame(results(analysisObject, contrast=c("condition", conditionOne, conditionTwo), pAdjustMethod="BH"))
finalData <- cbind(rownames(deData), slimRawCounts, slimNormalisedCounts, slimTpmNormalisedCounts, deData)
colnames(finalData)[1] <- "ensemblGeneID"
# Sort data and give genes their names
sortedFinalData <- finalData[order(finalData$pvalue), ]
sortedFinalData_named <- merge(sortedFinalData, dlist, by=0)
sortedFinalData_named <- sortedFinalData_named[,-1]
# Write data to file
write.table(sortedFinalData, file=paste("output/daoekd/differential_expression/", conditionOne, "_vs_", conditionTwo, ".txt", sep=""), row.names=F, sep="\t", quote=F)
# Get significant genes, because we want to cluster on this behaviour
significantGenes <- as.vector(unlist(subset(sortedFinalData_named, pvalue <= 0.05, select=c("ensemblGeneID"))))
sigTpmNormalisedCounts <- subset(tpmNormalisedCounts, rownames(tpmNormalisedCounts) %in% significantGenes)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(ggplot2)
library(ggthemes) # italics in the figures
library(ggtext) # italics in the figures
library(pheatmap)        # to plot heatmap
library(here); setwd(here())
# get the data (fresh session)
targets <- read.table("resources/targets_daoekd.txt", header=TRUE, sep="\t")
tpmNormalisedCounts <- readRDS('daoekd_counts.RDS')
# remove all rows that have no variance
tpmNormalisedCounts_pca <- tpmNormalisedCounts[
rowSums(tpmNormalisedCounts[-1] != tpmNormalisedCounts[[2]], na.rm = TRUE) != 0,
]
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(ggplot2)
library(ggthemes) # italics in the figures
library(ggtext) # italics in the figures
library(pheatmap)        # to plot heatmap
library(here); setwd(here())
# get the data (fresh session)
targets <- read.table("resources/targets_daoekd.txt", header=TRUE, sep="\t")
tpmNormalisedCounts <- readRDS('daoekd_counts.RDS')
# remove all rows that have no variance
tpmNormalisedCounts_pca <- tpmNormalisedCounts[
rowSums(tpmNormalisedCounts[-1] != tpmNormalisedCounts[[2]], na.rm = TRUE) != 0,
]
pca <- prcomp(t(tpmNormalisedCounts_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targets$sampleID, pca$x[,1:2])
summary(pca)
head(tpmNormalisedCounts)
tail(tpmNormalisedCounts)
# get the data (fresh session)
targetsB1 <- read.table("resources/targets_daoekd.txt", header=TRUE, sep="\t")
tpmNormalisedCountsB1 <- readRDS('daoekd_counts.RDS')
# remove all rows that have no variance
tpmNormalisedCountsB1_pca <- tpmNormalisedCountsB1[
rowSums(tpmNormalisedCountsB1[-1] != tpmNormalisedCountsB1[[2]], na.rm = TRUE) != 0,
]
pca <- prcomp(t(tpmNormalisedCountsB1_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targetsB1$sampleID, pca$x[,1:2])
summary(pca)
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=0, vjust=0) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=0.1, vjust=0.1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=0.1, vjust=0.5) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=0.1, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=1, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(hjust=0.5, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=1.5) +
geom_text(hjust=0.5, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=2.5) +
geom_text(size=4, hjust=0.5, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=3) +
geom_text(size=1, hjust=0.5, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=3) +
geom_text(size=2, hjust=0.5, vjust=1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB1$Condition[targetsB1$Condition=='ScOE'] <- '*esg>scute*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=3) +
geom_text(size=3, hjust=0.5, vjust=-1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1$Condition[targetsB1$Condition=='DaOE'] <- '*esg>da*'
targetsB1$Condition[targetsB1$Condition=='DaKD'] <- '*esg>da^RNAi^*'
targetsB1$Condition[targetsB1$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB1$sampleID), colour=factor(targetsB1$Condition) )
) +
geom_point(size=3) +
geom_text(size=3, hjust=0.5, vjust=-1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB2 <- read.table("resources/targets_dadasc.txt", header=TRUE, sep="\t")
tpmNormalisedCountsB2 <- readRDS('dadasc_counts.RDS')
# remove all rows that have no variance
tpmNormalisedCountsB2_pca <- tpmNormalisedCountsB2[
rowSums(tpmNormalisedCountsB2[-1] != tpmNormalisedCountsB2[[2]], na.rm = TRUE) != 0,
]
pca <- prcomp(t(tpmNormalisedCountsB2_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targetsB2$sampleID, pca$x[,1:2])
summary(pca)
targets$Condition[targets$Condition=='DaDaOE'] <- '*esg>da:da*'
targets$Condition[targets$Condition=='ScOE'] <- '*esg>scute*'
targets$Condition[targets$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targets$sampleID), colour=factor(targets$Condition))
) +
geom_point(size=2.5) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB2$Condition[targetsB2$Condition=='DaDaOE'] <- '*esg>da:da*'
targetsB2$Condition[targetsB2$Condition=='ScOE'] <- '*esg>scute*'
targetsB2$Condition[targetsB2$Condition=='Control'] <- '*esg>*'
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targetsB2$sampleID), colour=factor(targetsB2$Condition))
) +
geom_point(size=3) +
geom_text(size=3, hjust=0.5, vjust=-1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
targetsB1
rbind(targetsB1, targetsB2)
tpmNormalisedCounts <- cbind(tpmNormalisedCountsB1, tpmNormalisedCountsB2)
head(tpmNormalisedCountsB1)
rnames
rownames
rownames(tpmNormalisedCounts)
common_genes <- intersect(rownames(tpmNormalisedCountsB1), rownames(tpmNormalisedCountsB2))
length(common_genes)
tpmNormalisedCounts <- cbind(tpmNormalisedCountsB1[common_genes,],
tpmNormalisedCountsB2[common_genes,])
tpmNormalisedCounts_pca <- tpmNormalisedCounts[
rowSums(tpmNormalisedCounts[-1] != tpmNormalisedCounts[[2]], na.rm = TRUE) != 0,
]
pca <- prcomp(t(tpmNormalisedCounts_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targets$sampleID, pca$x[,1:2])
pca <- prcomp(t(tpmNormalisedCounts_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targets$sampleID, pca$x[,1:2])
pca
pca$x
rnames(pca$x)
nrows(pca$x)
nrow(pca$x)
nrow(targets)
ncols(targets)
ncol(targets)
targets
targets <- rbind(targetsB1, targetsB2)
pca <- prcomp(t(tpmNormalisedCounts_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targets$sampleID, pca$x[,1:2])
summary(pca)
targets <- rbind(targetsB1, targetsB2)
common_genes <- intersect(rownames(tpmNormalisedCountsB1), rownames(tpmNormalisedCountsB2))
tpmNormalisedCounts <- cbind(tpmNormalisedCountsB1[common_genes,],
tpmNormalisedCountsB2[common_genes,])
# remove all rows that have no variance
tpmNormalisedCounts_pca <- tpmNormalisedCounts[
rowSums(tpmNormalisedCounts[-1] != tpmNormalisedCounts[[2]], na.rm = TRUE) != 0,
]
# pca object
pca <- prcomp(t(tpmNormalisedCounts_pca), center=TRUE, scale=TRUE)
scores <- data.frame(targets$sampleID, pca$x[,1:2])
# plot
ggplot(scores,
aes(x = PC1, y = PC2, label=factor(targets$sampleID), colour=factor(targets$Condition))
) +
geom_point(size=3) +
geom_text(size=3, hjust=0.5, vjust=-1) +
scale_colour_discrete(name="condition") +
theme(legend.text=element_markdown(size=9))
