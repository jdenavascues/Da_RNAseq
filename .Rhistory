GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = zeng_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
zrank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da overexpression
zrank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da:da overexpression
zrank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# scute overexpression
zrank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
gse_list <- list(scOE_gse_zeng, dadaOE_gse_zeng, daOE_gse_zeng, daKD_gse_zeng)
# `conditions` were defined further above
sets.as.factors <- c("Excess ISC/EB", "Over-proliferation", "ISC to EE", "ISC to EC", "Large nucleus", "ISC death")
NES.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for RNAi-induced phenotypic class gene sets (Zeng et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
daKD_gse_zeng@organism <- 'dm'
daOE_gse_zeng@organism <- 'dm'
dadaOE_gse_zeng@organism <- 'dm'
scOE_gse_zeng@organism <- 'dm'
daKD_gse_zeng_gtr   <- importCP(daKD_gse_zeng, type = 'gsea')
daOE_gse_zeng_gtr   <- importCP(daOE_gse_zeng, type = 'gsea')
dadaOE_gse_zeng_gtr <- importCP(dadaOE_gse_zeng, type = 'gsea')
scOE_gse_zeng_gtr   <- importCP(scOE_gse_zeng, type = 'gsea')
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = scOE_gse_dutta_gtr$gsea_df$ID[1:2],
#show_gene = scOE_gse_dutta_gtr$genelist[seq(1, by=10, length=2),'ID']
show_gene = c('da', 'sc', 'emc', 'pros', 'poxn', 'Myo31DF', 'ck', 'nub', 'pdm2', 'esg', 'Dl'))
daKD_gse_zeng@organism <- 'dm'
daOE_gse_zeng@organism <- 'dm'
dadaOE_gse_zeng@organism <- 'dm'
scOE_gse_zeng@organism <- 'dm'
daKD_gse_zeng_gtr   <- importCP(daKD_gse_zeng, type = 'gsea')
daOE_gse_zeng_gtr   <- importCP(daOE_gse_zeng, type = 'gsea')
dadaOE_gse_zeng_gtr <- importCP(dadaOE_gse_zeng, type = 'gsea')
scOE_gse_zeng_gtr   <- importCP(scOE_gse_zeng, type = 'gsea')
plotGSEA(scOE_gse_zeng_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[1:2],
#show_gene = scOE_gse_dutta_gtr$genelist[seq(1, by=10, length=2),'ID']
show_gene = c('da', 'sc', 'emc', 'pros', 'poxn', 'Myo31DF', 'ck', 'nub', 'pdm2', 'esg', 'Dl'))
plotGSEA(scOE_gse_zeng_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[3],
#show_gene = scOE_gse_dutta_gtr$genelist[seq(1, by=10, length=2),'ID']
show_gene = c('da', 'sc', 'emc', 'pros', 'poxn', 'Myo31DF', 'ck', 'nub', 'pdm2', 'esg', 'Dl'))
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
glad_gmx
unique(glad_gmx$term)
str_extract_all("c\nb\na", regex("a.", dotall = TRUE))
str_extract_all("c\nb\na", regex("a$", dotall = TRUE))
layer.heatmap <- function(NES.df, padj.df, subt) {
p <- ggplot(NES.df, aes(x=ID, y=condition)) +
# plot statistic (NES)
geom_tile(aes(fill=NES), width=1) +
scale_fill_gradient2(low = cet_pal(3, name='cbd1')[1],
mid = cet_pal(3, name='cbd1')[2],
high = cet_pal(3, name='cbd1')[3],
midpoint = 0) +
# plot p-value
# statistically significant with colour and shape `*`
geom_point(data=subset(padj.df, p.adjust<0.05),
aes(x=ID, y=condition, colour=-log10(p.adjust)),
size=4, shape=8, stroke=1, alpha=1) +
#size=5, shape=23, alpha=1) +
# non-significant in dark gray and shape `x`
geom_point(data=subset(padj.df, p.adjust>0.05),
aes(x=ID, y=condition),
size=3, shape=4, stroke=2, alpha=1, colour='gray50') +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
coord_equal() +
theme_bw() +
ggtitle("Normalised Enrichment Scores",
subtitle = subt) +
scale_x_discrete(labels=toupper(levels(NES.df$ID)),
position = "top",
expand = expansion(mult = 0, add = 0)) +
scale_y_discrete(expand = expansion(mult = 0, add = 0)) +
labs(fill = 'NES',
colour = '-log~10~(_p.adj_)<br><span style = "font-size:8pt;">_p.adj_<0.05</span>') +
theme(axis.text.x = element_markdown(angle=25, hjust=0,
face='bold', size=10.5),
axis.text.y = element_markdown(hjust=1, face='bold', size=12),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(hjust=0.5, vjust=0.75),
legend.direction = 'horizontal',
legend.position = 'bottom',
panel.grid = element_blank(),
panel.border = element_rect(linewidth = 1))
return(p)
}
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
# common gene set
zeng_gmx <- import_from_gmx(paste0(getwd(),'/resources/Zeng.gmx'))
zeng_gmx$term <- str_replace_all(zeng_gmx$term, c(
"Excess of.ISC.or.EB" = "Excess ISC/EB",
"ISC to.EC"           = "ISC to EC",
"ISC to.EE"           = "ISC to EE",
"Overproliferation"   = "Over-proliferation" ) )
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = zeng_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
zrank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da overexpression
zrank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da:da overexpression
zrank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# scute overexpression
zrank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
gse_list <- list(scOE_gse_zeng, dadaOE_gse_zeng, daOE_gse_zeng, daKD_gse_zeng)
# `conditions` were defined further above
sets.as.factors <- c("Excess ISC/EB", "Over-proliferation", "ISC to EE", "ISC to EC", "Large nucleus", "ISC death")
NES.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for RNAi-induced phenotypic class gene sets (Zeng et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
plotGSEA(scOE_gse_zeng_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[3],
show_gene = c() )
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
glad_gmx$term <- str_replace_all(glad_gmx$term, c(
"."                              = " ",
regex("pathway$", dotall = TRUE) = "",
str_replace_all("major signaling pathways_notch pathway", regex("pathway$", dotall = TRUE))
str_replace_all("major signaling pathways_notch pathway", regex("pathway$", dotall = TRUE), '')
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
glad_gmx$term <- str_replace_all(glad_gmx$term, c(
"."                              = " ",
#regex("pathway$", dotall = TRUE) = "",
"_"                              = ":",
"signaling"                      = "",
" vs2"                           = "",)
)
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
glad_gmx$term <- str_replace_all(glad_gmx$term, c(
"."                              = " ",
#regex("pathway$", dotall = TRUE) = "",
"_"                              = ":",
"signaling"                      = "",
" vs2"                           = "")
)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = zeng_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
glad_gmx$term <- str_replace_all(glad_gmx$term, c(
"."                              = " ",
regex("pathway$", dotall = TRUE) = "",
setNames(c('',' '),
c(regex("pathway$", dotall = TRUE),'_')
)
pattern <- setNames(c('',' ',':','',),
c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
)
pattern <- setNames(c('',' ',':',''),
c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
)
glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
unique(glad_gmx$term)
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = zeng_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
grank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# da overexpression
grank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# da:da overexpression
grank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# scute overexpression
grank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
unique(glad_gmx$term)
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
NES.df
sets.as.factors
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
NES.df
gmx <- glad_gmx
gseCP_list <- gse_list
names(gse_list)
dvar <- 'NES'
conditions
empty <- data.frame(rep(0, length(unique(gmx$term))),
unique(gmx$term))
names(empty) <- c(dvar, 'ID')
empty
gsemerge <- function(gse, empty, dvar) {
return(
# full join selecting injecting dvar with
# embracing syntax {{}}
# bangbang !! operator with as.name function
# glue syntax "{}"
# dynamic assignment :=
full_join(select(gse, all_of({{dvar}}), ID), empty, by='ID') %>%
mutate( "{dvar}" := !!as.name(paste0(dvar,".x")) ) %>%
select( {{dvar}}, ID )
)
}
gseCP_list <- map(gseCP_list, \(x) x@result)
gseCP_list
gseCP_list[[1]]
gseCP_list <- lapply( gseCP_list, \(x) gsemerge(x, empty, dvar) )
gseCP_list[[1]]
gse
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# no correction of the names of the gene sets for the moment
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# da knockdown
grank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# da overexpression
grank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# da:da overexpression
grank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
# scute overexpression
grank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=grank), GSEAparams)
)
scOE_gse_glad
scOE_gse_glad@result
glad_gmx
grank
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# no correction of the names of the gene sets for the moment
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = glad_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# no correction of the names of the gene sets for the moment
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = glad_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea", nPermSimple = 10000)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# no correction of the names of the gene sets for the moment
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = glad_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea", nPermSimple = 100000)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank), GSEAparams)
)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000), GSEAparams)
)
# common gene set
glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# no correction of the names of the gene sets for the moment
# pattern <- setNames(c('',' ',':',''),
#                     c(regex("pathway$", dotall = TRUE),'.','_','signalling| vs2')
#                     )
# glad_gmx$term <- str_replace_all(glad_gmx$term, pattern)
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = glad_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000000), GSEAparams)
)
saveRDS(scOE_gse_glad, 'output/scOE_gse_glad.RDS')
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
daKD_gse_glad@organism <- 'dm'
daOE_gse_glad@organism <- 'dm'
dadaOE_gse_glad@organism <- 'dm'
scOE_gse_glad@organism <- 'dm'
daKD_gse_glad_gtr   <- importCP(daKD_gse_glad, type = 'gsea')
daOE_gse_glad_gtr   <- importCP(daOE_gse_glad, type = 'gsea')
dadaOE_gse_glad_gtr <- importCP(dadaOE_gse_glad, type = 'gsea')
scOE_gse_glad_gtr   <- importCP(scOE_gse_glad, type = 'gsea')
sets.as.factors
plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[,c(43,52)],
show_gene = c() )
plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[c(43,52)],
show_gene = c() )
plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_glad_gtr$gsea_df$ID[c(43,52)],
show_gene = c() )
scOE_gse_glad_gtr$gsea_df$ID
plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_glad_gtr$gsea_df$ID[c(1,6)],
show_gene = c() )
plotGSEA(scOE_gse_glad_gtr,
plot_type = "classic",
show_pathway = scOE_gse_glad_gtr$gsea_df$ID[c(1,6)],
show_gene = c() )
