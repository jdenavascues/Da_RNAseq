) +
ggtitle("Enriched/depleted GO terms in *esg > da:da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
#coord_fixed(ratio=0.8) +
force_panelsizes(rows = unit(3.5,'in'), cols = unit(4,'in')) +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=7, lineheight=0.7, colour=d)
)
#gsep$coordinates$ratio <- 0.01
suppressWarnings(print(gsep))
# using `clusterProfiler` and `enrichplot`
# select reg set
scOE_rank <- make_degrank(ScOE_deg, mode='log2fc')
# GSEA
scOE_GSEgo <- gseGO(geneList=scOE_rank,
keyType = 'SYMBOL',
OrgDb=org.Dm.eg.db,
minGSSize    = 15,
maxGSSize    = 1000,
pvalueCutoff = 0.05,
nPermSimple = 100000,
eps = 0,
verbose=F)
# get the logP values instead of padj
scOE_GSEgo_log <- scOE_GSEgo
scOE_GSEgo_log@result$p.adjust <- -log10(scOE_GSEgo_log@result$p.adjust) # use @slot and $column to assign
# to subset the data to the highest NES values
#scOE_GSEgo_log@result <- subset(scOE_GSEgo_log@result, abs(NES)>1.8)
# to subset the data to the lowest p-values:
number_of_terms <- 30
cutoff <- rev(rev(sort(scOE_GSEgo_log$p.adjust))[1:number_of_terms])[1]
scOE_GSEgo_log@result <- subset(scOE_GSEgo_log@result, p.adjust>=cutoff)
# to control colour of GO terms according to enrichment or depletion
d <- ifelse(sort(scOE_GSEgo_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(scOE_GSEgo_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
suppressWarnings(print(gsep))
import_from_gmx <- function(gmxfile) {
# read a GMX file and turn it into a df input appropriate for `clusterProfiler`
df <- read.csv(gmxfile, header=TRUE, sep='\t')
# remove 'na's in 1st row
df <- df[ !df[1]=='na', ]
# pivot
df <- df %>% pivot_longer(cols = everything(),
names_to = 'term',
values_to = 'gene')
# remove rows with no genes
df <- df %>% subset(gene != '')
df <- df %>% mutate(gene = str_replace(gene, "FBGN", "FBgn"),
term = str_replace(term, ".only", "-only"))
df <- df %>% mutate(term = str_replace(term, "\\.", " "))
df <- df %>% mutate(term = str_replace(term, " genes", ""))
return(df)
}
dutta_gmx <- import_from_gmx(paste0(getwd(),'/resources/Dutta.gmx'))
daKD_gse_dutta <- GSEA(geneList=make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
daKD_gse_dutta_log <- daKD_gse_dutta
daKD_gse_dutta_log@result$p.adjust <- -log10(daKD_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(daKD_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daKD_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da^RNAi^*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
daOE_gse_dutta <- GSEA(geneList=make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
daOE_gse_dutta_log <- daOE_gse_dutta
daOE_gse_dutta_log@result$p.adjust <- -log10(daOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(daOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
dadaOE_gse_dutta <- GSEA(geneList=make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
dadaOE_gse_dutta_log <- dadaOE_gse_dutta
dadaOE_gse_dutta_log@result$p.adjust <- -log10(dadaOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(dadaOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(dadaOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da:da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
scOE_gse_dutta <- GSEA(geneList=make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
scOE_gse_dutta_log <- scOE_gse_dutta
scOE_gse_dutta_log@result$p.adjust <- -log10(scOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(scOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(scOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
scuter <- data.frame(l2fc=make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')) %>%
mutate(index=row_number(), id=row.names(.))
labels <- ScOE_deg %>%
select(ensemblGeneID, log2FoldChange, gene_symbol) %>%
slice_max(log2FoldChange,n=5) %>%
mutate(index=row_number())
p <- ggplot(scuter, aes(x=index, y=l2fc))
p + geom_point(alpha=0.2) +
geom_text_repel(labels, mapping=aes(label = gene_symbol, x=index, y=log2FoldChange),
point.padding=0.5, box.padding=1, nudge_x = 1500)
cat(
paste0('esg>da[RNAi] leads to a log2fc of _da_ of:\t',
as.character(subset(DaKD_deg, gene_symbol=='da')$log2FoldChange), '\n'),
paste0('esg>da leads to a log2fc of _da_ of:\t',
as.character(subset(DaOE_deg, gene_symbol=='da')$log2FoldChange), '\n'),
paste0('esg>da:da leads to a log2fc of _da_ of:\t',
as.character(subset(DaDaOE_deg, gene_symbol=='da')$log2FoldChange), '\n'),
paste0('esg>sc leads to a log2fc of _scute_ of:\t',
as.character(subset(ScOE_deg, gene_symbol=='sc')$log2FoldChange), '\n')
)
# the gsea objects generated from clusterProfiler are:
# daKD_gse_dutta, daOE_gse_dutta, dadaOE_gse_dutta, scOE_gse_dutta
daKD_gse_dutta@organism <- 'dm'
daOE_gse_dutta@organism <- 'dm'
dadaOE_gse_dutta@organism <- 'dm'
scOE_gse_dutta@organism <- 'dm'
daKD_gse_dutta_gtr   <- importCP(daKD_gse_dutta, type = 'gsea')
daOE_gse_dutta_gtr   <- importCP(daOE_gse_dutta, type = 'gsea')
dadaOE_gse_dutta_gtr <- importCP(dadaOE_gse_dutta, type = 'gsea')
scOE_gse_dutta_gtr   <- importCP(scOE_gse_dutta, type = 'gsea')
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = scOE_gse_dutta_gtr$gsea_df$ID[1:2],
#show_gene = scOE_gse_dutta_gtr$genelist[seq(1, by=10, length=2),'ID']
show_gene = c('da', 'sc', 'emc', 'pros', 'poxn', 'Myo31DF', 'ck', 'nub', 'pdm2', 'esg', 'Dl'))
## extract data from a list of gse objects from clusterProfiler into a single df
## gmx is a df containing the data of a GMX file
## gseCP_list is a list of clusterProfiler GSEA objects
## conditions is a list with the names of the experimental conditions for those GSEA objects
## dvar (data variable) for "name injection" with <data-masking> tidyverse functions
gseCP_summarise <- function(gmx, gseCP_list, conditions, sets.as.factors, dvar, cluster=FALSE) {
if ( !(dvar %in% c('NES', 'p.adjust')) ) {
stop("The argument `dvar` must be one of `NES` and `p.adjust`")
}
# create template with all term IDs (clusterProfiler trims those that do not give results)
empty <- data.frame(rep(0, length(unique(gmx$term))),
unique(gmx$term))
names(empty) <- c(dvar, 'ID')
# create function to merge `empty` with GSE object data for each term ID
gsemerge <- function(gse, empty, dvar) {
return(
# full join selecting injecting dvar with
# embracing syntax {{}}
# bangbang !! operator with as.name function
# glue syntax "{}"
# dynamic assignment :=
full_join(select(gse, all_of({{dvar}}), ID), empty, by='ID') %>%
mutate( "{dvar}" := !!as.name(paste0(dvar,".x")) ) %>%
select( {{dvar}}, ID )
)
}
# purr::map to convert the gse_list from S4 objects to their @result slots
gseCP_list <- map(gseCP_list, \(x) x@result)
# apply gsemerge
gseCP_list <- lapply( gseCP_list, \(x) gsemerge(x, empty, dvar) )
# name them to associate conditions with the data
names(gseCP_list) <- conditions
df <- gseCP_list %>%
# change the colnames to condition names
imap(.x = ., ~ set_names(.x, c(.y, "ID"))) %>%
# merge them all together
purrr::reduce(full_join, by='ID') %>%
# tidy up all dvar values in one col
pivot_longer(cols=-c('ID'), names_to = "condition", values_to = dvar)
df$condition <- factor(df$condition, levels = conditions)
df$ID <- factor(df$ID, levels = sets.as.factors)
if (cluster) {
if (dvar != 'NES') warning("Clustering is intended for enrichment scores, not p-values")
vectors <- df %>%
pivot_wider(names_from = condition, values_from = {{dvar}}) %>%
mutate_all(replace_na, 100)
clust <- hclust(dist(as.matrix(vectors[2:length(gseCP_list)])))
df$ID <- factor(df$ID, levels=vectors$ID[clust$order])
}
return(df)
}
gse_list <- list(scOE_gse_dutta, dadaOE_gse_dutta, daOE_gse_dutta, daKD_gse_dutta)
conditions <- c('*scute*', '*da:da*', '*da*', '*da^RNAi^*')
# gse_list and conditions must have the same order
sets.as.factors <- c("ISC-only", "Progenitor", "EB-only", "EE-only",
"Absorptive", "EC-only", "Differentiation")
NES.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
layer.heatmap <- function(NES.df, padj.df, subt) {
p <- ggplot(NES.df, aes(x=ID, y=condition)) +
# plot statistic (NES)
geom_tile(aes(fill=NES), width=1) +
scale_fill_gradient2(low = cet_pal(3, name='cbd1')[1],
mid = cet_pal(3, name='cbd1')[2],
high = cet_pal(3, name='cbd1')[3],
midpoint = 0) +
# plot p-value
# statistically significant with colour and shape `*`
geom_point(data=subset(padj.df, p.adjust<0.05),
aes(x=ID, y=condition, colour=-log10(p.adjust)),
size=4, shape=8, stroke=1, alpha=1) +
#size=5, shape=23, alpha=1) +
# non-significant in dark gray and shape `x`
geom_point(data=subset(padj.df, p.adjust>0.05),
aes(x=ID, y=condition),
size=3, shape=4, stroke=2, alpha=1, colour='gray50') +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
coord_equal() +
theme_bw() +
ggtitle("Normalised Enrichment Scores",
subtitle = subt) +
scale_x_discrete(labels=toupper(levels(NES.df$ID)),
position = "top",
expand = expansion(mult = 0, add = 0)) +
scale_y_discrete(expand = expansion(mult = 0, add = 0)) +
labs(fill = 'NES',
colour = '-log~10~(_p.adj_)<br><span style = "font-size:8pt;">_p.adj_<0.05</span>') +
theme(axis.text.x = element_markdown(angle=25, hjust=0,
face='bold', size=10.5),
axis.text.y = element_markdown(hjust=1, face='bold', size=12),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.title = element_markdown(hjust=0.5, vjust=0.75),
legend.direction = 'horizontal',
legend.position = 'bottom',
panel.grid = element_blank(),
panel.border = element_rect(linewidth = 1))
return(p)
}
subt <- "for cell-type specific gene sets (Dutta et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
# common gene set
zeng_gmx <- import_from_gmx(paste0(getwd(),'/resources/Zeng.gmx'))
zeng_gmx$term <- str_replace_all(zeng_gmx$term, c(
"Excess of.ISC.or.EB" = "Excess ISC/EB",
"ISC to.EC"           = "ISC to EC",
"ISC to.EE"           = "ISC to EE",
"Overproliferation"   = "Over-proliferation" ) )
# common parameters
GSEAparams <- list(exponent = 1, minGSSize = 1, maxGSSize = 1000, eps = 0, pvalueCutoff = 1,
pAdjustMethod = "BH", TERM2GENE = zeng_gmx, TERM2NAME = NA, verbose = TRUE,
seed = FALSE, by = "fgsea")
# da knockdown
zrank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da overexpression
zrank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# da:da overexpression
zrank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
# scute overexpression
zrank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_zeng <- do.call(
GSEA, c(list(geneList=zrank), GSEAparams)
)
gse_list <- list(scOE_gse_zeng, dadaOE_gse_zeng, daOE_gse_zeng, daKD_gse_zeng)
# `conditions` were defined further above
sets.as.factors <- c("Excess ISC/EB", "Over-proliferation", "ISC to EE", "ISC to EC", "Large nucleus", "ISC death")
NES.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'NES')
padj.df <- gseCP_summarise(zeng_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for RNAi-induced phenotypic class gene sets (Zeng et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5)
daKD_gse_zeng@organism <- 'dm'
daOE_gse_zeng@organism <- 'dm'
dadaOE_gse_zeng@organism <- 'dm'
scOE_gse_zeng@organism <- 'dm'
daKD_gse_zeng_gtr   <- importCP(daKD_gse_zeng, type = 'gsea')
daOE_gse_zeng_gtr   <- importCP(daOE_gse_zeng, type = 'gsea')
dadaOE_gse_zeng_gtr <- importCP(dadaOE_gse_zeng, type = 'gsea')
scOE_gse_zeng_gtr   <- importCP(scOE_gse_zeng, type = 'gsea')
plotGSEA(scOE_gse_zeng_gtr,
plot_type = "classic",
show_pathway = scOE_gse_zeng_gtr$gsea_df$ID[3],
show_gene = c() )
gladdir <- paste0(getwd(),'/resources/GLAD')
gladfiles <- paste(gladdir, list.files(gladdir), sep='/')
names(gladfiles) <- lapply (
gladfiles,
\(x) str_split(str_split(x, "GLAD_")[[1]][[2]], '_')[[1]][[1]] )
read.add <- function(csv, csvlist) {
df <- read.csv(csv)
df$term <- names(which(csvlist==csv))
return(df)
}
datas <- lapply(gladfiles, \(x) read.add(x, gladfiles))
glad_dataset <- do.call(rbind , c(datas, make.row.names=FALSE))
substitutions <- c(' signaling pathway$'='',
'\\.'=' ',
'Co '='Co-',
'Non '='Non-',
'RTK| RTK'='',
"DNA "="DNA-",
"TNF "="TNF-",
"TGF "="TGF-",
' and '=' / ',
'transcription factor|Transcription factor'='TF',
':'='/')
glad_dataset <- glad_dataset %>%
# remove 1-2-1 substitutions above
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) str_replace_all(x, substitutions))) %>%
# remove trailing spaces
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) str_replace_all(x, '  $| $', ''))) %>%
# start all strings with Uppercase
mutate(across(c(term, Sub.group, Sub.sub.group),
\(x) gsub(x, pattern="(^[[:lower:]])", replacement="\\U\\1", perl=TRUE)))
# View(glad_dataset %>% select(term, Sub.group, Sub.sub.group) %>% distinct())
# major groups
glad_gmx <- glad_dataset %>%
select(term, FBgn) %>%
rename(gene = FBgn)
# subgroups
refine_glad_by <- function(dataset, col.name) {
# refined by col.name
subgrouping <- dataset %>%
# select terms with subgroups
filter(!is.na(.data[[col.name]])) %>%
# select the term and subgroup cols
select(term, {{col.name}}) %>%
# get unique pairs of terms/subgroup
distinct()
# re-make term/gene cols as per subgroups now
gmx <- lapply(
unique(subgrouping$term),
\(x) dataset %>%
filter( !is.na(.data[[col.name]]) & term=={{x}} ) %>%
select({{col.name}}, FBgn) %>%
rename(gene = FBgn, term = {{col.name}})
)
names(gmx) <- unique(subgrouping$term)
return(gmx)
}
glad_sub_gmx <- refine_glad_by(glad_dataset, 'Sub.group')
glad_sub2_gmx <- refine_glad_by(glad_dataset, 'Sub.sub.group')
# common gene set
#old_glad_gmx <- import_from_gmx(paste0(getwd(),'/resources/GLAD.gmx'))
# common parameters
GSEAparams <- list(
exponent = 1,
minGSSize = 1,
maxGSSize = 5000,
eps = 0,
pvalueCutoff = 1,
pAdjustMethod = "BH",
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea"
)
# da knockdown
rank <- make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID')
daKD_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da overexpression
rank <- make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID')
daOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# da:da overexpression
rank <- make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID')
dadaOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000, TERM2GENE = glad_gmx), GSEAparams)
)
# scute overexpression
rank <- make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')
scOE_gse_glad <- do.call(
GSEA, c(list(geneList=rank, nPermSimple = 1000000, TERM2GENE = glad_gmx), GSEAparams)
)
saveRDS(scOE_gse_glad, 'output/scOE_gse_glad.RDS')
# scOE_gse_glad <- readRDS('output/scOE_gse_glad.RDS')
gse_list <- list(scOE_gse_glad, dadaOE_gse_glad, daOE_gse_glad, daKD_gse_glad)
# `conditions` were defined further above
sets.as.factors <- unique(glad_gmx$term)
NES.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'NES', cluster = TRUE)
padj.df <- gseCP_summarise(glad_gmx, gse_list, conditions, sets.as.factors, 'p.adjust')
subt <- "for Gene List Annotation for Drosophila gene sets (Hu et al., 2015)"
p <- layer.heatmap(NES.df, padj.df, subt)
p + geom_hline(aes(yintercept=3.5), linewidth = 0.5) +
theme(plot.margin = margin(r = 100))
subglad_gsea <- function(deg, gmx, perms=1000) {
g <- lapply(
gmx, \(x) do.call(
GSEA,
c(list(geneList=make_degrank(deg, mode='log2fc', key='ensemblGeneID'),
nPermSimple = perms,
TERM2GENE = x),
GSEAparams)
)
)
names(g) <- names(gmx)
return(g)
}
daKD_gse_gladsub   <- subglad_gsea(DaKD_deg, glad_sub_gmx)
