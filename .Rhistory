# using https://stackoverflow.com/questions/44991607
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_up <- mots_up %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_up$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_up <- mots_up %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(p)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
p +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 1.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$sc,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = 0.4,
nudge_y = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
ylim(2.5,10)
palette <- c( brewer.pal(12, 'Paired')[c(6, 8, 4, 2, 10)], '#CCCCCC' )
p <- ggplot(mots_up, aes(x=geneSet, y=NES, fill=TFcla6, colour=TFcla6)) +
geom_dotplot(binaxis='y',
stackdir='center',
stackgroups = TRUE,
method='histodot',
binwidth=0.1,
dotsize=1,
alpha=1,
stroke=0) +
scale_fill_manual(name='',
breaks=levels(mots_up$TFcla6),
values=palette,
labels=levels(mots_up$TFcla6),
guide=guide_legend(nrow = 1)) +
scale_colour_manual(name='',
breaks=levels(mots_up$TFcla6),
values=palette,
labels=levels(mots_up$TFcla6),
guide=guide_legend(nrow = 1)) +
xlab('TFs linked to enriched motifs') +
theme(axis.text.x = element_markdown(face='bold', size=10),
aspect.ratio = 0.5,
legend.position = 'bottom')
p
# using https://stackoverflow.com/questions/44991607
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_up <- mots_up %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_up$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_up <- mots_up %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(p)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
p +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 1.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$sc,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = 0.4,
nudge_y = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
guides(fill = guide_legend(nrow=1),
colour = guide_legend(nrow=1)) +
ylim(2.5,10)
palette <- c( brewer.pal(12, 'Paired')[c(8, 6, 2, 4, 10)], '#CCCCCC' )
q <- ggplot(mots_dn, aes(x=geneSet, y=NES, fill=TFcla6, colour=TFcla6)) +
geom_dotplot(binaxis='y',
stackdir='center',
stackgroups = TRUE,
method='histodot',
binwidth=0.1,
dotsize=1,
alpha=1,
stroke=0) +
scale_fill_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
scale_colour_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
xlab('TFs linked to enriched motifs') +
theme(axis.text.x = element_markdown(face='bold', size=10),
aspect.ratio = 0.5,
legend.position = 'bottom')
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_dn <- mots_dn %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_dn$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_dn <- mots_dn %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(q)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
q +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 0,
force_pull = 0.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$`E(spl)`,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 3,
xlim = c(0.4, 3.5),
ylim = c(6,10),
force = 0.8,
box.padding = 0.2,
force_pull = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
guides(fill = guide_legend(override.aes = aes(color = NA))) +
guides(fill = guide_legend(nrow=1),
colour = guide_legend(nrow=1)) +
ylim(2.5,10)
palette <- c( brewer.pal(12, 'Paired')[c(8, 6, 2, 4, 10)], '#CCCCCC' )
q <- ggplot(mots_dn, aes(x=geneSet, y=NES, fill=TFcla6, colour=TFcla6)) +
geom_dotplot(binaxis='y',
stackdir='center',
stackgroups = TRUE,
method='histodot',
binwidth=0.1,
dotsize=1,
alpha=1,
stroke=0) +
scale_fill_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
scale_colour_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
xlab('TFs linked to enriched motifs') +
theme(axis.text.x = element_markdown(face='bold', size=10),
aspect.ratio = 0.5,
legend.position = 'bottom')
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_dn <- mots_dn %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_dn$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_dn <- mots_dn %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(q)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
q +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 0,
force_pull = 0.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$`E(spl)`,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 3,
xlim = c(0.4, 3.5),
ylim = c(6,10),
force = 0.8,
box.padding = 0.2,
force_pull = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
guides(fill = guide_legend(nrow=1),
colour = guide_legend(nrow=1)) +
ylim(2.5,10) +
theme(plot.margin = margin(r = 100))
palette <- c( brewer.pal(12, 'Paired')[c(8, 6, 2, 4, 10)], '#CCCCCC' )
q <- ggplot(mots_dn, aes(x=geneSet, y=NES, fill=TFcla6, colour=TFcla6)) +
geom_dotplot(binaxis='y',
stackdir='center',
stackgroups = TRUE,
method='histodot',
binwidth=0.1,
dotsize=1,
alpha=1,
stroke=0) +
scale_fill_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
scale_colour_manual(name='',
breaks=levels(mots_dn$TFcla6),
values=palette,
labels=levels(mots_dn$TFcla6),
guide=guide_legend(nrow = 1)) +
xlab('TFs linked to enriched motifs') +
theme(axis.text.x = element_markdown(face='bold', size=10),
aspect.ratio = 0.5,
legend.position = 'bottom')
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_dn <- mots_dn %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_dn$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_dn <- mots_dn %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(q)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
q +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 0,
force_pull = 0.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
aes(label = arrange(mots_dn, geneSet, TFcla6, NES)$`E(spl)`,
x = xtext, y = ytext,
colour = arrange(mots_dn, geneSet, TFcla6, NES)$TFcla6),
size=2,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 3,
xlim = c(0.4, 3.5),
ylim = c(6,10),
force = 0.8,
box.padding = 0.2,
force_pull = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
guides(fill = guide_legend(nrow=1),
colour = guide_legend(nrow=1)) +
ylim(2.5,10) +
theme(plot.margin = margin(r = 50))
ggsave(paste0(figdir, '/motifs_down_TFclass.pdf'))
palette <- c( brewer.pal(12, 'Paired')[c(6, 8, 4, 2, 10)], '#CCCCCC' )
p <- ggplot(mots_up, aes(x=geneSet, y=NES, fill=TFcla6, colour=TFcla6)) +
geom_dotplot(binaxis='y',
stackdir='center',
stackgroups = TRUE,
method='histodot',
binwidth=0.1,
dotsize=1,
alpha=1,
stroke=0) +
scale_fill_manual(name='',
breaks=levels(mots_up$TFcla6),
values=palette,
labels=levels(mots_up$TFcla6),
guide=guide_legend(nrow = 1)) +
scale_colour_manual(name='',
breaks=levels(mots_up$TFcla6),
values=palette,
labels=levels(mots_up$TFcla6),
guide=guide_legend(nrow = 1)) +
xlab('TFs linked to enriched motifs') +
theme(axis.text.x = element_markdown(face='bold', size=10),
aspect.ratio = 0.5,
legend.position = 'bottom')
p
# using https://stackoverflow.com/questions/44991607
tfs.regex <- c('da', 'sc', 'ase', 'E\\(spl\\)')
tfs.var <- c('da', 'sc', 'ase', 'E(spl)')
for (j in 1:length(tfs.regex)) {
mots_up <- mots_up %>%
mutate('{tfs.var[[j]]}' := if_else(
(str_detect(as.character(mots_up$TFs), tfs.regex[[j]]) & TFcla6=='bHLH'),
tfs.var[[j]], NA) )
}
mots_up <- mots_up %>%
unite('tf.labs', all_of(tfs.var), sep = ', ', na.rm = TRUE, remove=FALSE)
# to get the lines of ggrepel text where we want:
built <- ggplot_build(p)
point.pos <- built$data[[1]]
size <- dev.size(units = 'px')
extent <- with(built$layout$panel_params[[1]], abs(c(diff(x.range), diff(y.range))))
bw <- point.pos$binwidth[[1]]
# por la cuenta de la vieja, al final
xtext <- point.pos$x + point.pos$stackpos * bw * (size[2] / size[1]) * (extent[1] / extent[2]) * (38/64)
ytext <- point.pos$y
p +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$da,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = -0.25,
nudge_y = 1.5,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
geom_text_repel(
# reindex - point.pos is organised by X values, then by FILL colour
# which equates to ordering tf.lab as X, then TFclass, then NES
aes(label = arrange(mots_up, geneSet, TFcla6, NES)$sc,
x = xtext, y = ytext,
colour = arrange(mots_up, geneSet, TFcla6, NES)$TFcla6),
size=3,
# general
max.overlaps = Inf,
# position
direction = 'both',
nudge_x = 0.4,
nudge_y = 0,
# segment
#arrow = arrow(angle=20, length = unit(0.015, "npc")),
min.segment.length = 0,
segment.color = 'gray30',
segment.alpha = 0.75,
segment.size = 0.2) +
guides(fill = guide_legend(nrow=1),
colour = guide_legend(nrow=1)) +
ylim(2.5,10)
ggsave(paste0(figdir, '/motifs_up_TFclass.pdf'))
librarian::shelf(clusterProfiler)
Version(clusterProfiler)
version(clusterProfiler)
packageVersion(clusterProfiler)
packageVersion('clusterProfiler')
BiocManager::install('clusterProfiler')
