attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
#Add column and row names to the rawData data.frame.
colnames(rawData) <- paste(targets$Condition, c(1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,2,3), sep='_')
rownames(rawData) <- fileContents$Geneid
rawData$Gene <- fileContents$Geneid
head(rawData)
#Add column and row names to the rawData data.frame.
colnames(rawData) <- paste(targets$Condition, c(1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,2,3), sep='_')
rawData
head(rawData)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
library(ggplot2)         # for making QC plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData)
dlist
rawData
head(rawData)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, c(1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,2,3), sep='_')
colnames(rawData)
rownames(rawData) <- fileContents$Geneid
rawData$Geneid <- fileContents$Geneid
typeof(fileContents$Geneid)
class(fileContents$Geneid)
what(fileContents$Geneid)
whatis(fileContents$Geneid)
is.list(fileContents$Geneid)
is.data.frame(fileContents$Geneid)
is.data.frame(fileContents)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
head(rawData)
type(rawData)
typeof(rawData)
is.matrix(rawData)
is.data.frame(rawData)
colnames(rawData) <- paste(targets$Condition, c(1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,2,3), sep='_')
is.data.frame(rawData)
rownames(rawData) <- fileContents$Geneid
targets$Condition
targets$Replicate
# calculate PC
pca_uncorrected_obj = prcomp(rawData)
# pull PCA values from the object
pca_uncorrected = as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] = targets$Condition
pca_uncorrected[,"batch"] = targets$Batch
pca_uncorrected[,"replicate"] = targets$Replicate
# make plot
cols <- c("A" = "#481567FF", "B" = "#1F968BFF")
p1 = ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p1 = p1 + geom_point(size=3)
p1 = p1 + stat_ellipse(type="norm", linetype=2)
p1 = p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 = p1 + scale_colour_manual(values = cols)
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("A" = "#481567FF", "B" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("A" = "#481567FF", "B" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
p1
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("A" = "#481567FF", "B" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
p1
targets$Batch
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("a" = "#481567FF", "b" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
p1
pca_uncorrected
install.packages('gtable')
install.packages("gtable")
library(gtable)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
library(ggplot2)         # for making QC plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, targets$Replicate, sep='_')
rownames(rawData) <- fileContents$Geneid
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("a" = "#481567FF", "b" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
p1
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("a" = "#481567FF", "b" = "#1F968BFF")
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
#p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1 <- p1 + scale_colour_manual(values = cols)
p1
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
#p1 <- p1 + stat_ellipse(type="norm", linetype=2)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
#p1 <- p1 + scale_colour_manual(values = cols)
p1
targets$Condition
class(uncorrected_data)
(as.matrix(rawData)==rawData)
((as.matrix(rawData))==(rawData))
is.matrix(rawData)
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = rawData, batch = batches, group = groups)
library("sva") # >= v3.36.0
library("ggplot2")
library("gridExtra")
library("edgeR")
library("UpSetR")
library("sva") # >= v3.36.0
library("ggplot2")
library("gridExtra")
library("edgeR")
library("UpSetR")
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p1 <- p1 + geom_point(size=3)
p1 <- p1 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut", color="Condition", shape="Batch")
p1
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = rawData, batch = batches, group = groups)
corrected_data = cbind(Gene=rownames(rawData), corrected_data)
dim(uncorrected_data)
dim(rawData)
dim(corrected_data)
library(RColorBrewer)
Paired()
brewer.pal(n,Paired)
brewer.pal(n,'Paired')
brewer.pal(5,'Paired')
brewer.pal(10,'Paired')
targets$Condition
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
pca_corrected_obj <- prcomp(corrected_data)
# Transform the format of our groups and batches from names ("a", "b") to numbers (1, 2)
# in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = rawData, batch = batches, group = groups)
# Join the gene IDs onto the now corrected counts from ComBat_seq
corrected_data = cbind(Gene=rownames(rawData), corrected_data)
batches
groups
# Transform the format of our groups and batches from names ("a", "b") to numbers (1, 2)
# in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = rawData, batch = batches, group = groups)
# Join the gene IDs onto the now corrected counts from ComBat_seq
corrected_data = cbind(Gene=rownames(rawData), corrected_data)
pca_corrected_obj <- prcomp(corrected_data)
head(corrected_data[,2:-1]
)
head(corrected_data[,2:length(corrected_data)]
)
head(corrected_data[,2:length(corrected_data)])
head(corrected_data[,2:3])
length(corrected_data)
length(names(corrected_data))
corrected_data)
corrected_data
ncols(corrected_data)
dim(corrected_data)
dim(corrected_data)[[2]]
pca_corrected_obj <- prcomp(corrected_data[,2:dim(corrected_data)[[2]]])
head(corrected_data[,2:dim(corrected_data)[[2]]])
# Transform the format of our groups and batches from names ("a", "b") to numbers (1, 2)
# in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = as.matrix(rawData), batch = batches, group = groups)
# Join the gene IDs onto the now corrected counts from ComBat_seq
corrected_data = cbind(Gene=rownames(rawData), corrected_data)
head(corrected_data[,2:dim(corrected_data)[[2]]])
class(corrected_data[,2:dim(corrected_data)[[2]]])
typeof(corrected_data[,2:dim(corrected_data)[[2]]])
head(as.numeric(corrected_data[,2:dim(corrected_data)[[2]]]))
# Transform the format of our groups and batches from names ("a", "b") to numbers (1, 2)
# in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = as.matrix(rawData), batch = batches, group = groups)
head(corrected_data[,2:dim(corrected_data)[[2]]])
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
# pull PCA values from the object
pca_corrected <- as.data.frame(pca_corrected_obj[2]$rotation)
# assign labels
pca_corrected[,"condition"] <- targets$Condition
pca_corrected[,"batch"]     <- targets$Batch
pca_corrected[,"replicate"] <- targets$Replicate
# as above, create a PCA plot for comparison to the uncorrected data
cols <- c("DaKD"="#1F78B4", "DaOE"="#FF7F00", "Control"="#6A3D9A", "DaDaOE"="#E31A1C" , "ScOE"="#33A02C")
p2 <- ggplot(data=pca_corrected, aes(x=PC1, y=PC2, color=condition, shape=library_method))
p2 <- p2 + geom_point(size=3)
p2 <- p2 + stat_ellipse(type="norm", linetype=2)
p2 <- p2 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut, batch-corrected", color="Condition", shape="Batch")
p2 <- p2 + scale_colour_manual(values = cols)
p2
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
# pull PCA values from the object
pca_corrected <- as.data.frame(pca_corrected_obj[2]$rotation)
# assign labels
pca_corrected[,"condition"] <- targets$Condition
pca_corrected[,"batch"]     <- targets$Batch
pca_corrected[,"replicate"] <- targets$Replicate
# as above, create a PCA plot for comparison to the uncorrected data
cols <- c("DaKD"="#1F78B4", "DaOE"="#FF7F00", "Control"="#6A3D9A", "DaDaOE"="#E31A1C" , "ScOE"="#33A02C")
p2 <- ggplot(data=pca_corrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p2 <- p2 + geom_point(size=3)
p2 <- p2 + stat_ellipse(type="norm", linetype=2)
p2 <- p2 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut, batch-corrected", color="Condition", shape="Batch")
p2 <- p2 + scale_colour_manual(values = cols)
p2
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
# pull PCA values from the object
pca_corrected <- as.data.frame(pca_corrected_obj[2]$rotation)
# assign labels
pca_corrected[,"condition"] <- targets$Condition
pca_corrected[,"batch"]     <- targets$Batch
pca_corrected[,"replicate"] <- targets$Replicate
# as above, create a PCA plot for comparison to the uncorrected data
cols <- c("DaKD"="#1F78B4", "DaOE"="#FF7F00", "Control"="#6A3D9A", "DaDaOE"="#E31A1C" , "ScOE"="#33A02C")
p2 <- ggplot(data=pca_corrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p2 <- p2 + geom_point(size=3)
p2 <- p2 + stat_ellipse(type="norm", linetype=2)
p2 <- p2 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut, batch-corrected", color="Condition", shape="Batch")
p2 <- p2 + scale_colour_manual(values = cols)
p2
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
# pull PCA values from the object
pca_corrected <- as.data.frame(pca_corrected_obj[2]$rotation)
# assign labels
pca_corrected[,"condition"] <- targets$Condition
pca_corrected[,"batch"]     <- targets$Batch
pca_corrected[,"replicate"] <- targets$Replicate
# as above, create a PCA plot for comparison to the uncorrected data
cols <- c("DaKD"="#1F78B4", "DaOE"="#FF7F00", "Control"="#6A3D9A", "DaDaOE"="#E31A1C" , "ScOE"="#33A02C")
p2 <- ggplot(data=pca_corrected, aes(x=PC1, y=PC2, color=condition, shape=batch))
p2 <- p2 + geom_point(size=3)
p2 <- p2 + labs(title="PCA, RNA-seq counts for two batches of genetic manipulation in the fly gut, batch-corrected", color="Condition", shape="Batch")
p2 <- p2 + scale_colour_manual(values = cols)
p2
