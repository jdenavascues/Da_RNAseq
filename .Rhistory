cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
#annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
hm
ann_colors
ann_label
labels_sample$sample[mat_cluster_cols$order]
labels_sample$sample
paste(rep('scute', 3),c(1:3))
paste(rep('da-RNAi', 3),1:3)
vsd_cor_Object
labels_sample <- data.frame(sample=c(paste(rep('da-RNAi', 3),1:3),
paste(rep('da', 2),     1:2),
paste(rep('control', 6),rep(1:3,2)),
paste(rep('da:da', 3),  1:3),
paste(rep('scute', 3),  1:3)))
rownames(labels_sample) <- rownames(vsd_cor_Object)
hm <- pheatmap(
# data
mat               = vsd_cor_Object[mat_cluster_rows$order, mat_cluster_cols$order], # manually ordered as in clusters
scale             = "none", # otherwise numbers are changed
cellwidth         = 15,
cellheight        = 15,
# title
main              = main.title,
fontsize          = 14,
# rows
cluster_rows      = FALSE,#mat_cluster_rows,
#treeheight_row    = 25, # default is 50
#cutree_rows       = 4,
gaps_row          = c(6,9,12,14),
show_rownames     = TRUE,
labels_row        = labels_sample$sample[mat_cluster_rows$order],
fontsize_row      = 9,
annotation_row    = annot_batch,
# cols
cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
#annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
hm
ann_label
hm <- pheatmap(
# data
mat               = vsd_cor_Object[mat_cluster_rows$order, mat_cluster_cols$order], # manually ordered as in clusters
scale             = "none", # otherwise numbers are changed
cellwidth         = 15,
cellheight        = 15,
# title
main              = main.title,
fontsize          = 14,
# rows
cluster_rows      = FALSE,#mat_cluster_rows,
#treeheight_row    = 25, # default is 50
#cutree_rows       = 4,
gaps_row          = c(6,9,12,14),
show_rownames     = TRUE,
labels_row        = labels_sample$sample[mat_cluster_rows$order],
fontsize_row      = 9,
annotation_row    = annot_batch,
# cols
cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
ann_colors
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
main.title <- 'RNAseq sample correlations'
## get sorted clusters
sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- hclust(dist(vsd_cor_Object))
mat_cluster_rows <- sort_hclust(mat_cluster_rows)
## mark the batches
annot_batch <- data.frame(batch = ifelse(test = targets$Batch == 'a',
yes = 'batch A',
no = 'batch B'))
rownames(annot_batch) <- rownames(vsd_cor_Object)
## annotation labels
ann_labels <- dplyr::select(exptDesign, condition)
ann_labels$condition <- plyr::mapvalues(exptDesign$condition,
from=unique(exptDesign$condition),
to=c('da RNAi', 'da o/e', 'control', 'da:da o/e', 'scute o/e'))
ann_labels$condition <- factor(ann_labels$condition, levels=c('control', 'da o/e', 'da:da o/e', 'da RNAi', 'scute o/e'))
## annotation colours
ann_colors = list(
batch = c('batch A' = RColorBrewer::brewer.pal(12, 'Paired')[2],
'batch B' = RColorBrewer::brewer.pal(12, 'Paired')[8]),
condition = c("da RNAi" = RColorBrewer::brewer.pal(12, 'Paired')[9],
"da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[5],
"control" = RColorBrewer::brewer.pal(12, 'Paired')[1],
"da:Da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[6],
"scute o/e" = RColorBrewer::brewer.pal(12, 'Paired')[4])
)
## mark the samples for ggtext
labels_sample <- data.frame(sample=c(paste(rep('da-RNAi', 3),1:3),
paste(rep('da', 2),     1:2),
paste(rep('control', 6),rep(1:3,2)),
paste(rep('da:da', 3),  1:3),
paste(rep('scute', 3),  1:3)))
rownames(labels_sample) <- rownames(vsd_cor_Object)
## get minimum correlation value, rounded for the legend
bot <- ceiling(min(vsd_cor_Object)*100)/100
hm <- pheatmap(
# data
mat               = vsd_cor_Object[mat_cluster_rows$order, mat_cluster_cols$order], # manually ordered as in clusters
scale             = "none", # otherwise numbers are changed
cellwidth         = 15,
cellheight        = 15,
# title
main              = main.title,
fontsize          = 14,
# rows
cluster_rows      = FALSE,#mat_cluster_rows,
#treeheight_row    = 25, # default is 50
#cutree_rows       = 4,
gaps_row          = c(6,9,12,14),
show_rownames     = TRUE,
labels_row        = labels_sample$sample[mat_cluster_rows$order],
fontsize_row      = 9,
annotation_row    = annot_batch,
# cols
cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
main.title <- 'RNAseq sample correlations'
## get sorted clusters
sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- hclust(dist(vsd_cor_Object))
mat_cluster_rows <- sort_hclust(mat_cluster_rows)
## mark the batches
annot_batch <- data.frame(batch = ifelse(test = targets$Batch == 'a',
yes = 'batch A',
no = 'batch B'))
rownames(annot_batch) <- rownames(vsd_cor_Object)
## annotation labels
ann_labels <- dplyr::select(exptDesign, condition)
ann_labels$condition <- plyr::mapvalues(exptDesign$condition,
from=unique(exptDesign$condition),
to=c('da RNAi', 'da o/e', 'control', 'da:da o/e', 'scute o/e'))
ann_labels$condition <- factor(ann_labels$condition, levels=c('control', 'da o/e', 'da:da o/e', 'da RNAi', 'scute o/e'))
## annotation colours
ann_colors = list(
batch = c('batch A' = RColorBrewer::brewer.pal(12, 'Paired')[2],
'batch B' = RColorBrewer::brewer.pal(12, 'Paired')[8]),
condition = c("da RNAi" = RColorBrewer::brewer.pal(12, 'Paired')[9],
"da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[5],
"control" = RColorBrewer::brewer.pal(12, 'Paired')[1],
"da:da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[6],
"scute o/e" = RColorBrewer::brewer.pal(12, 'Paired')[4])
)
## mark the samples for ggtext
labels_sample <- data.frame(sample=c(paste(rep('da-RNAi', 3),1:3),
paste(rep('da', 2),     1:2),
paste(rep('control', 6),rep(1:3,2)),
paste(rep('da:da', 3),  1:3),
paste(rep('scute', 3),  1:3)))
rownames(labels_sample) <- rownames(vsd_cor_Object)
## get minimum correlation value, rounded for the legend
bot <- ceiling(min(vsd_cor_Object)*100)/100
hm <- pheatmap(
# data
mat               = vsd_cor_Object[mat_cluster_rows$order, mat_cluster_cols$order], # manually ordered as in clusters
scale             = "none", # otherwise numbers are changed
cellwidth         = 15,
cellheight        = 15,
# title
main              = main.title,
fontsize          = 14,
# rows
cluster_rows      = FALSE,#mat_cluster_rows,
#treeheight_row    = 25, # default is 50
#cutree_rows       = 4,
gaps_row          = c(6,9,12,14),
show_rownames     = TRUE,
labels_row        = labels_sample$sample[mat_cluster_rows$order],
fontsize_row      = 9,
annotation_row    = annot_batch,
# cols
cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
hm
View(exptDesign)
color=colorRampPalette(c("navy", "white", "red"))(50))
colorRampPalette(c("navy", "white", "red"))(50))
colorRampPalette(c("navy", "white", "red"),50)
colorRampPalette(c('navy','white','firebrick'))
colorRampPalette(c('navy','white','firebrick'),50)
ccc <- colorRampPalette(c('navy','white','firebrick'),50)
ccc
install.packages('ggplotify')
library(ggplotify)
hmgg <- ggplotify(hm)
hmgg <- as.ggplot(hm)
hmgg + theme(axis.text.x = element_markdown())
str(hmgg)
View(hmgg)
summary(hmgg)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
main.title <- '*RNAseq* sample correlations'
## get sorted clusters
sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- hclust(dist(vsd_cor_Object))
mat_cluster_rows <- sort_hclust(mat_cluster_rows)
## mark the batches
annot_batch <- data.frame(batch = ifelse(test = targets$Batch == 'a',
yes = 'batch A',
no = 'batch B'))
rownames(annot_batch) <- rownames(vsd_cor_Object)
## annotation labels
ann_labels <- dplyr::select(exptDesign, condition)
ann_labels$condition <- plyr::mapvalues(exptDesign$condition,
from=unique(exptDesign$condition),
to=c('da RNAi', 'da o/e', 'control', 'da:da o/e', 'scute o/e'))
ann_labels$condition <- factor(ann_labels$condition, levels=c('control', 'da o/e', 'da:da o/e', 'da RNAi', 'scute o/e'))
## annotation colours
ann_colors = list(
batch = c('batch A' = RColorBrewer::brewer.pal(12, 'Paired')[2],
'batch B' = RColorBrewer::brewer.pal(12, 'Paired')[8]),
condition = c("da RNAi" = RColorBrewer::brewer.pal(12, 'Paired')[9],
"da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[5],
"control" = RColorBrewer::brewer.pal(12, 'Paired')[1],
"da:da o/e" = RColorBrewer::brewer.pal(12, 'Paired')[6],
"scute o/e" = RColorBrewer::brewer.pal(12, 'Paired')[4])
)
## mark the samples for ggtext
labels_sample <- data.frame(sample=c(paste(rep('da-RNAi', 3),1:3),
paste(rep('da', 2),     1:2),
paste(rep('control', 6),rep(1:3,2)),
paste(rep('da:da', 3),  1:3),
paste(rep('scute', 3),  1:3)))
rownames(labels_sample) <- rownames(vsd_cor_Object)
## get minimum correlation value, rounded for the legend
bot <- ceiling(min(vsd_cor_Object)*100)/100
hm <- pheatmap(
# data
mat               = vsd_cor_Object[mat_cluster_rows$order, mat_cluster_cols$order], # manually ordered as in clusters
scale             = "none", # otherwise numbers are changed
cellwidth         = 15,
cellheight        = 15,
# title
main              = main.title,
fontsize          = 14,
# rows
cluster_rows      = FALSE,#mat_cluster_rows,
#treeheight_row    = 25, # default is 50
#cutree_rows       = 4,
gaps_row          = c(6,9,12,14),
show_rownames     = TRUE,
labels_row        = labels_sample$sample[mat_cluster_rows$order],
fontsize_row      = 9,
annotation_row    = annot_batch,
# cols
cluster_cols      = FALSE,#mat_cluster_cols,
#treeheight_col    = 25,
#cutree_cols       = 4,
show_colnames     = TRUE,
labels_col        = labels_sample$sample[mat_cluster_cols$order],
fontsize_col      = 9,
angle_col         = 45,
# legends
annotation        = ann_label,
annotation_colors = ann_colors,
legend_breaks     = c(bot, bot+(1-bot)/2, 1),
# tiles
color             = scico(255, palette='bamako'),
border_color      = NA,
#display_numbers   = TRUE,
#fontsize_number   = 5,
#number_color      = 'white',
# save plot
#filename          = 'RNAseq_sample_corr.png',
#width             = 8,
#height            = 6
)
hm
hmgg <- as.ggplot(hm)
summary(hmgg)
hmgg + theme(text=element_markdown())
hmgg$plot_env$plot$gtable$colnames
hmgg$layers
hmgg$theme
summary(hmgg)
geom_custom_ann
geom_custom_ann()
library("grid")
library("ggplotify")
p1 <- as.grob(~barplot(1:10))
p2 <- as.grob(expression(plot(rnorm(10))))
p3 <- as.grob(function() plot(sin))
library("vcd")
p1
p2
p3
install.packages(;"vcd")
install.packages("vcd")
library("grid")
library("ggplotify")
p1 <- as.grob(~barplot(1:10))
p2 <- as.grob(expression(plot(rnorm(10))))
p3 <- as.grob(function() plot(sin))
library("vcd")
data(Titanic)
p4 <- as.grob(~mosaic(Titanic))
library("lattice")
data(mtcars)
p5 <- as.grob(densityplot(~mpg|cyl, data=mtcars))
p4
p5
grid.newpage()
grid.draw(p1)
vp = viewport(x=.35, y=.75, width=.35, height=.3)
pushViewport(vp)
grid.draw(p2)
upViewport()
library(ggplot2)
p1 <- as.ggplot(~barplot(1:10)) +
annotate("text", x = .6, y = .5,
label = "Hello Base Plot", size = 5,
color = 'firebrick', angle=45)
p2 <- as.ggplot(expression(plot(rnorm(10))))
p3 <- as.ggplot(function() plot(sin))
p4 <- as.ggplot(~mosaic(Titanic))
p5 <- as.ggplot(densityplot(~mpg|cyl, data=mtcars))
library(cowplot)
library(colorspace)
col <- rainbow_hcl(3)
names(col) <- unique(iris$Species)
color <- col[iris$Species]
p6 <- as.ggplot(~plot(iris$Sepal.Length, iris$Sepal.Width, col=color, pch=15))
p7 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=15) + scale_color_manual(values=col, name="")
legend <- get_legend(p7)
## also able to annotate base or other plots using ggplot2
library(ggimage)
install.packages('ggimage')
library(cowplot)
library(colorspace)
col <- rainbow_hcl(3)
names(col) <- unique(iris$Species)
color <- col[iris$Species]
p6 <- as.ggplot(~plot(iris$Sepal.Length, iris$Sepal.Width, col=color, pch=15))
p7 <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) +
geom_point(shape=15) + scale_color_manual(values=col, name="")
legend <- get_legend(p7)
## also able to annotate base or other plots using ggplot2
library(ggimage)
p8 <- p6 + geom_subview(x=.7, y=.78, subview=legend)
p9 <- as.ggplot(~image(volcano))
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, labels=LETTERS[1:9])
get_legend(hmgg)
gl <- get_legend(hmgg)
gl
View(mtcars)
rawDataWithLengths <- merge(allGeneLengths, rawCounts, by.x="gene_id", by.y="row.names", all=T)
analysisObject = DESeq(exptObject)
plotDispEsts(analysisObject)
rawCounts <- as.data.frame(counts(analysisObject, normalized=FALSE))
normalisedCounts <- as.data.frame(counts(analysisObject, normalized=TRUE))
rawDataWithLengths <- merge(allGeneLengths, rawCounts, by.x="gene_id", by.y="row.names", all=T)
rawCountData <- rawDataWithLengths[,colnames(rawCounts)]
rownames(rawCountData) <- rawDataWithLengths[,1]
tpmData <- NULL
for (colName in colnames(rawCountData)) {
tpmData <- cbind(tpmData, tpm(rawDataWithLengths[,colName], rawDataWithLengths$max.tx_len))
}
tpmData <- as.data.frame(tpmData)
colnames(tpmData) <- colnames(rawCounts)
rownames(tpmData) <- rawDataWithLengths[,1]
tpmNormalisedCounts <- tpmData[match(rownames(rawCounts), rownames(tpmData)), ]
if (!identical(rownames(rawCounts), rownames(normalisedCounts))) {
stop()
}
if (!identical(rownames(tpmNormalisedCounts), rownames(normalisedCounts))) {
stop()
}
saveRDS(tpmNormalisedCounts, 'batched_counts.RDS')
conditionOne <- 'Control'
conditionTwo <- 'DaKD'
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleID
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
targets$Condition
targets$sampleID
targets
[targets$Condition %in% c(conditionOne, conditionTwo)
targets$Condition %in% c(conditionOne, conditionTwo)
rawCounts
targets$sampleID
targets$sampleIDs <- names(rawCounts)
conditions_sampleIDs <- targets[targets$Condition %in% c(conditionOne, conditionTwo),]$sampleIDs
slimRawCounts           <- rawCounts           %>% select(all_of(conditions_sampleIDs))
slimNormalisedCounts    <- normalisedCounts    %>% select(all_of(conditions_sampleIDs))
slimTpmNormalisedCounts <- tpmNormalisedCounts %>% select(all_of(conditions_sampleIDs))
colnames(slimRawCounts)           <- paste("raw", conditions_sampleIDs, sep=".")
colnames(slimNormalisedCounts)    <- paste("norm", conditions_sampleIDs, sep=".")
colnames(slimTpmNormalisedCounts) <- paste("tpm", conditions_sampleIDs, sep=".")
targets$sampleIDs slimRawCounts<- names(rawCounts)
slimRawCounts
head(slimRawCounts)
head(slimNormalisedCounts)
head(slimTpmNormalisedCounts)
deData <- as.data.frame(results(analysisObject, contrast=c("condition", conditionOne, conditionTwo), pAdjustMethod="BH"))
finalData <- cbind(rownames(deData), slimRawCounts, slimNormalisedCounts, slimTpmNormalisedCounts, deData)
colnames(finalData)[1] <- "ensemblGeneID"
finalData
head(finalData)
