rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
# calculate PC
pca_uncorrected_obj <- prcomp(rawData)
# pull PCA values from the object
pca_uncorrected <- as.data.frame(pca_uncorrected_obj[2]$rotation)
# assign labels
pca_uncorrected[,"condition"] <- targets$Condition
pca_uncorrected[,"batch"]     <- targets$Batch
pca_uncorrected[,"replicate"] <- targets$Replicate
# make plot
cols <- c("DaKD"="#1F78B4", "DaOE"="#FF7F00", "Control"="#6A3D9A", "DaDaOE"="#E31A1C" , "ScOE"="#33A02C")
xlab <- paste0("PC1, ",
round(summary(pca_uncorrected_obj)$importance["Proportion of Variance","PC1"]*100, 1),
" %")
ylab <- paste0("PC2, ",
round(summary(pca_uncorrected_obj)$importance["Proportion of Variance","PC2"]*100, 1),
" %")
title <- "PCA, *daugtherless* function RNA-seq analysis"
subtitle <- "**RAW, UNCORRECTED DATA**"
p1 <- ggplot(data=pca_uncorrected, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Transform the format of our groups and batches from names ("a", "b") to numbers (1, 2)
# in the command below "sapply" is used to apply the "switch" command to each element and convert names to numbers as we define
groups = sapply(as.character(targets$Condition), switch,
"DaKD" = 1, "DaOE" = 2, "Control" = 3, "DaDaOE" = 4, "ScOE" = 5, USE.NAMES = F)
batches = sapply(as.character(targets$Batch), switch,
"a" = 1, "b" = 2, USE.NAMES = F)
# Run ComBat_seq
corrected_data = ComBat_seq(counts = as.matrix(rawData), batch = batches, group = groups)
# Join the gene IDs onto the now corrected counts from ComBat_seq
# corrected_data = cbind(Gene=rownames(rawData), corrected_data) # no need to do this and then this will become non-numeric
# calculate PC
pca_corrected_obj <- prcomp(corrected_data)
# pull PCA values from the object
pca_corrected <- as.data.frame(pca_corrected_obj[2]$rotation)
# assign labels
pca_corrected[,"condition"] <- targets$Condition
pca_corrected[,"batch"]     <- targets$Batch
pca_corrected[,"replicate"] <- targets$Replicate
# as above, create a PCA plot for comparison to the uncorrected data
xlab <- paste0("PC1, ",
round(summary(pca_corrected_obj)$importance["Proportion of Variance","PC1"]*100, 1),
" %")
ylab <- paste0("PC2, ",
round(summary(pca_corrected_obj)$importance["Proportion of Variance","PC2"]*100, 1),
" %")
subtitle <- "**RAW, BATCH-CORRECTED DATA**"
p2 <- ggplot(data=pca_corrected, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
grid.arrange(p1, p2, ncol = 2)
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ condition + batch)
exptObject$condition <- factor(exptObject$condition, levels = c("Control", "DaKD", "DaOE", "DaDaOE", "ScOE"))
analysisObject = DESeq(exptObject)
# Pull out the raw and normalised data from the analysis object.
rawCounts <- as.data.frame(counts(analysisObject, normalized=FALSE))
normalisedCounts <- as.data.frame(counts(analysisObject, normalized=TRUE))
# Raw Uncorrected
pca_RU_obj <- prcomp(rawCounts)
pca_RU <- as.data.frame(pca_RU_obj[2]$rotation)
pca_RU[,"condition"] <- targets$Condition
pca_RU[,"batch"]     <- targets$Batch
pca_RU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_RU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_RU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**RAW, UNCORRECTED DATA**"
q1 <- ggplot(data=pca_RU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Raw Corrected
corrawCounts = ComBat_seq(counts = as.matrix(rawCounts), batch = batches, group = groups)
pca_RC_obj <- prcomp(corrawCounts)
pca_RC <- as.data.frame(pca_RC_obj[2]$rotation)
pca_RC[,"condition"] <- targets$Condition
pca_RC[,"batch"]     <- targets$Batch
pca_RC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_RU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_RU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**RAW, CORRECTED DATA**"
q2 <- ggplot(data=pca_RC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Normalised Uncorrected
pca_NU_obj <- prcomp(normalisedCounts)
pca_NU <- as.data.frame(pca_NU_obj[2]$rotation)
pca_NU[,"condition"] <- targets$Condition
pca_NU[,"batch"]     <- targets$Batch
pca_NU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_NU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_NU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**RAW, UNCORRECTED DATA**"
q3 <- ggplot(data=pca_NU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Normalised Corrected
corrnormCounts = ComBat_seq(counts = as.matrix(normalisedCounts), batch = batches, group = groups)
pca_NC_obj <- prcomp(corrnormCounts)
pca_NC <- as.data.frame(pca_NC_obj[2]$rotation)
pca_NC[,"condition"] <- targets$Condition
pca_NC[,"batch"]     <- targets$Batch
pca_NC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_NC_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_NC_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**RAW, CORRECTED DATA**"
q4 <- ggplot(data=pca_NC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
grid.arrange(q1, q2, q3, q4, ncol=2, nrow=2)
QrawCounts <- normalize.quantiles(as.matrix(rawCounts))
batchQC(dat=QrawCounts,
batch=targets$Batch,
condition=targets$Condition,
#report_file="batchqc_report.html",
#report_dir=".",
#report_option_binary="111111111",
view_report=FALSE,
interactive=TRUE,
batchqc_output=FALSE)
QnormalisedCounts <- normalize.quantiles(as.matrix(normalisedCounts))
batchQC(dat=normalisedCounts,
batch=targets$Batch,
condition=targets$Condition,
report_file="batchqc_report_norm.html",
report_dir=".",
report_option_binary="111111111",
view_report=FALSE,
interactive=TRUE,
batchqc_output=FALSE)
QnormalisedCounts <- normalize.quantiles(as.matrix(normalisedCounts))
batchQC(dat=normalisedCounts,
batch=targets$Batch,
condition=targets$Condition,
report_file="batchqc_report_norm.html",
report_dir=".",
report_option_binary="111111111",
view_report=TRUE,
interactive=TRUE,
batchqc_output=TRUE)
# Quantile Normalised Uncorrected
pca_QNU_obj <- prcomp(QnormalisedCounts)
pca_QNU <- as.data.frame(pca_QNU_obj[2]$rotation)
pca_QNU[,"condition"] <- targets$Condition
pca_QNU[,"batch"]     <- targets$Batch
pca_QNU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, UNCORRECTED DATA**"
r1 <- ggplot(data=pca_QNU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Normalised Corrected
corrQnormCounts = ComBat_seq(counts = as.matrix(QnormalisedCounts), batch = batches, group = groups)
pca_QNC_obj <- prcomp(corrQnormCounts)
pca_QNC <- as.data.frame(pca_QNC_obj[2]$rotation)
pca_QNC[,"condition"] <- targets$Condition
pca_QNC[,"batch"]     <- targets$Batch
pca_QNC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, BATCH-CORRECTED DATA (COMBAT)**"
r2 <- ggplot(data=pca_QNC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
grid.arrange(r1, r2, nrow=2)
grid.arrange(r1, r2, ncol=2)
# Quantile Normalised Uncorrected
pca_QNU_obj <- prcomp(QnormalisedCounts)
pca_QNU <- as.data.frame(pca_QNU_obj[2]$rotation)
pca_QNU[,"condition"] <- targets$Condition
pca_QNU[,"batch"]     <- targets$Batch
pca_QNU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, UNCORRECTED DATA**"
r1 <- ggplot(data=pca_QNU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Normalised Corrected
corrQnormCounts = ComBat_seq(counts = as.matrix(QnormalisedCounts), batch = batches, group = groups)
pca_QNC_obj <- prcomp(corrQnormCounts)
pca_QNC <- as.data.frame(pca_QNC_obj[2]$rotation)
pca_QNC[,"condition"] <- targets$Condition
pca_QNC[,"batch"]     <- targets$Batch
pca_QNC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, BATCH-CORRECTED DATA (COMBAT)**"
r2 <- ggplot(data=pca_QNC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
grid.arrange(r1, r2, ncol=2)
# Quantile Normalised Uncorrected
pca_QNU_obj <- prcomp(QnormalisedCounts)
pca_QNU <- as.data.frame(pca_QNU_obj[2]$rotation)
pca_QNU[,"condition"] <- targets$Condition
pca_QNU[,"batch"]     <- targets$Batch
pca_QNU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, UNCORRECTED DATA**"
r1 <- ggplot(data=pca_QNU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
# Normalised Corrected
corrQnormCounts = ComBat_seq(counts = as.matrix(QnormalisedCounts), batch = batches, group = groups)
pca_QNC_obj <- prcomp(corrQnormCounts)
pca_QNC <- as.data.frame(pca_QNC_obj[2]$rotation)
pca_QNC[,"condition"] <- targets$Condition
pca_QNC[,"batch"]     <- targets$Batch
pca_QNC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, BATCH-CORRECTED DATA (COMBAT)**"
r2 <- ggplot(data=pca_QNC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=3) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=12),
plot.subtitle=element_markdown(size=9))
grid.arrange(r1, r2, ncol=2)
# Quantile Normalised Uncorrected
pca_QNU_obj <- prcomp(QnormalisedCounts)
pca_QNU <- as.data.frame(pca_QNU_obj[2]$rotation)
pca_QNU[,"condition"] <- targets$Condition
pca_QNU[,"batch"]     <- targets$Batch
pca_QNU[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNU_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, UNCORRECTED DATA**"
r1 <- ggplot(data=pca_QNU, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=2) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=10),
plot.subtitle=element_markdown(size=7))
# Normalised Corrected
corrQnormCounts = ComBat_seq(counts = as.matrix(QnormalisedCounts), batch = batches, group = groups)
pca_QNC_obj <- prcomp(corrQnormCounts)
pca_QNC <- as.data.frame(pca_QNC_obj[2]$rotation)
pca_QNC[,"condition"] <- targets$Condition
pca_QNC[,"batch"]     <- targets$Batch
pca_QNC[,"replicate"] <- targets$Replicate
xlab <- paste0("PC1, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC1"]*100, 1), " %")
ylab <- paste0("PC2, ", round(summary(pca_QNC_obj)$importance["Proportion of Variance","PC2"]*100, 1), " %")
subtitle <- "**Q-NORMALISED, BATCH-CORRECTED DATA (COMBAT)**"
r2 <- ggplot(data=pca_QNC, aes(x=PC1, y=PC2, color=condition, shape=batch)) +
geom_point(size=2) +
labs(title=title, subtitle=subtitle, x=xlab, y=ylab) +
scale_colour_manual(values = cols) +
theme(legend.position="right",
plot.title=element_markdown(size=10),
plot.subtitle=element_markdown(size=7))
grid.arrange(r1, r2, ncol=2)
install.packages("swirl")
library(swirl)
install_course("Course Name Here")
install_course("R Programming")
swirl()
5+7
x <- 5+7
bye()
library(sva)
library(bladderbatch)
install.packages('badderbatch', 'bladderdata', 'pamr')
install.packages('badderbatch')
BiocManager::install('bladderbatch')
y
library(bladderbatch)
library(limma)
library(pamr)
install.packages(pamr)
install.packages('pamr')
library(pamr)
data(bladderdata)
pheno = pData(bladderEset)
head(pheno)
pheno
bladderEset
edata = exprs(bladderEset)
edata
mod = model.matrix(~as.factor(cancer), data=pheno)]
mod = model.matrix(~as.factor(cancer), data=pheno)
mod
targets
mod = model.matrix(~as.factor(Condition), data=targets)
mod
mod = model.matrix(~as.factor(cancer), data=pheno)
mod2 = model.matrix(~as.factor(Condition), data=targets)
mod0 = model.matrix(~1,data=pheno)
mod-
mod0
mod20 = model.matrix(~1,data=targets)
mod20
n.sv = num.sv(edata,mod,method="leek")
n.sv
svobj = sva(edata,mod,mod0,n.sv=n.sv)
n.sv = num.sv(normalisedCounts, mod2, method='leek')
n.sv
mod2
targets
targets_trim <- targets[,c(1,4,5)]
targets_trim
pheno
target
targets_trim
pheno
targets_trim
names(targets_trim) <- c('sample', 'condition', 'batch')
rownames(targets_trim) <- targets_trim$sample
seq_along(nrow(targets_trim))
nrow(targets_trim)
rownames(targets_trim) <- targets_trim$sample
targets_trim$sample <- 1:nrow(targets_trim)
targets_trim
transform(targets_trim, num=NUMBERS[batches])
transform(targets_trim, num=as.numeric(batch))
mutate(targets_trim, set_names(1:2, c('a', 'b')))
mutate(targets_trim, purrr::set_names(1:2, c('a', 'b')))
mutate(targets_trim, purrr::set_names(1:2, c('a', 'b'))[batch])
mutate(targets_trim, batch=purrr::set_names(1:2, c('a', 'b'))[batch])
targets_trim
targets_trim %>% mutate(batch=purrr::set_names(1:2, c('a', 'b'))[batch])
targets_trim
targets_trim <- targets_trim %>% mutate(
batch=purrr::set_names(1:2, c('a', 'b'))[batch]
)
targets_trim
mod2 = model.matrix(~as.factor(condition), data=targets_trim)
mod2)
mod2
mod0 = model.matrix(~1,data=pheno)
mod20 = model.matrix(~1,data=targets_trim)
mod20
n.sv = num.sv(edata,mod,method="leek")
n.sv
n.sv2 = num.sv(normalisedCounts,mod2,method="leek")
n.sv2
svobj2 = sva(normalisedCounts,mod2,mod20,n.sv=n.sv2)
head(normalisedCOunts)
head(normalisedCounts)
targets_trim
rownames(targets_trim) <- names(normalisedCounts)
targets_trim
mod2 = model.matrix(~as.factor(condition), data=targets_trim)
mod20 = model.matrix(~1,data=targets_trim)
n.sv2 = num.sv(normalisedCounts,mod2,method="leek")
n.sv2
mod2
View(mod2)
svobj2 = sva(normalisedCounts,mod2,mod20,n.sv=n.sv2)
head(normalisedCounts)
edata
is.data.frame(edata)
is.matrix(edata)
is.matrix(normalisedCounts)
svobj2 = sva(as.matrix(normalisedCounts),mod2,mod20,n.sv=n.sv2)
normalisedCounts
any(normalisedCounts, is.na(), na.rm=FALSE)
any(normalisedCounts, function(x) is.na(c), na.rm=FALSE)
any(normalisedCounts, function(x) is.na(x), na.rm=FALSE)
apply(normalisedCounts, 2, function(x) any(x, is.na()))
normalisedCounts$DaKD_1_a
any(normalisedCounts$DaKD_1_a, is.na())
anyNA(normalisedCounts$DaKD_1_a)
apply(normalisedCounts, 2, function(x) anyNA())
apply(normalisedCounts, 2, function(x) anyNA(x))
pValues = f.pvalue(edata,mod,mod0)
qValues = p.adjust(pValues,method="BH")
modSv = cbind(mod,svobj$sv)
mod0Sv = cbind(mod0,svobj$sv)
pValuesSv = f.pvalue(edata,modSv,mod0Sv)
qValuesSv = p.adjust(pValuesSv,method="BH")
fit = lmFit(edata,modSv)
contrast.matrix <- cbind("C1"=c(-1,1,0,rep(0,svobj$n.sv)),"C2"=c(0,-1,1,rep(0,svobj$n.sv)
fitContrasts = contrasts.fit(fit,contrast.matrix)
contrast.matrix <- cbind("C1"=c(-1,1,0,rep(0,svobj$n.sv)),"C2"=c(0,-1,1,rep(0,svobj$n.sv)
fitContrasts = contrasts.fit(fit,contrast.matrix)
contrast.matrix <- cbind("C1"=c(-1,1,0,rep(0,svobj$n.sv)),"C2"=c(0,-1,1,rep(0,svobj$n.sv)))
fitContrasts = contrasts.fit(fit,contrast.matrix)
fitContrasts
eb = eBayes(fitContrasts)
topTableF(eb, adjust="BH")
batch = pheno$batch
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
library(readr)
gtf
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
# bioinformatics
library(DESeq2)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
# data / plotting
library(ggplot2)
library(dplyr)
library(stringr)
library(pheatmap)        # pretty heatmaps
library(scico)           # scientific colour maps
library(dendsort)        # sort dendrograms
# convenience
library(readr)
library(writexl)
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
gtf <- 'Drosophila_melanogaster.BDGP6.28.101.gtf' # same release as the one used for mapping
txdb <- makeTxDbFromGRanges( import( unzip(gtf, paste0('resources/', gtf) ) ) )
unzip(gtf, paste0('resources/', gtf) )
gtf <- 'Drosophila_melanogaster.BDGP6.28.101.gtf' # same release as the one used for mapping
gtfdata <- read.csv(unzip(gtf, paste0('resources/', gtf))
)
gtf
paste0('resources/', gtf
paste0('resources/', gtf)
paste0('resources/', gtf)
is.file(paste0('resources/', gtf))
file.exists(paste0('resources/', gtf))
setwd(here())
getwd()
file.exists(paste0('resources/', gtf))
file.exists(paste0('resources/', gtf, '.zip'))
gtf <- 'Drosophila_melanogaster.BDGP6.28.101.gtf' # same release as the one used for mapping
txdb <- makeTxDbFromGRanges( import( unzip(gtf, paste0('resources/', gtf, '.zip')) ) ) )
unzip(gtf, paste0('resources/', gtf, '.zip'))
unzip(paste0('resources/', gtf, '.zip'), gtf)
gtf <- 'Drosophila_melanogaster.BDGP6.28.101.gtf' # same release as the one used for mapping
txdb <- makeTxDbFromGRanges( import( unzip(paste0('resources/', gtf, '.zip'), gtf) ) ) )
unzip(paste0('resources/', gtf, '.zip'), gtf)
txdb <- makeTxDbFromGRanges( import( unzip(paste0('resources/', gtf, '.zip'), gtf) ) )
