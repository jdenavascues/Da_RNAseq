angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
hm <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
hm
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
h <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
h
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
# DGE analysis
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
# general bioinformatics
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
# batch correction
library(sva) # >= v3.36.0
library(BatchQC)
library(preprocessCore)
# library(limma)
# plotting and data tidying
library(ggplot2)         # for making plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(scico)           # for vik colour map
library(dendsort)        # to sort dendrograms
library(gridExtra)
library(UpSetR)
library(ggthemes)        # italics in the figures
library(ggtext)          # italics in the figures
library(gridExtra)
# general convenience
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ batch + condition)
exptObject$condition <- factor(exptObject$condition, levels = c("Control", "DaKD", "DaOE", "DaDaOE", "ScOE"))
vsd_Object <- vst(exptObject, blind=TRUE)
plotPCA(vsd_Object)
assay(vsd_Object) <- limma::removeBatchEffect( assay(vsd_Object),
batch=vsd_Object$batch,
design=model.matrix(~condition, colData(vsd_Object)) )
plotPCA(vsd_Object)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
h <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
# DGE analysis
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
# general bioinformatics
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
# batch correction
library(sva) # >= v3.36.0
library(BatchQC)
library(preprocessCore)
# library(limma)
# plotting and data tidying
library(ggplot2)         # for making plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(scico)           # for vik colour map
library(dendsort)        # to sort dendrograms
library(gridExtra)
library(UpSetR)
library(ggthemes)        # italics in the figures
library(ggtext)          # italics in the figures
library(gridExtra)
# general convenience
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
install.packages('pheatmap')
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ batch + condition)
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = c('png', 'cairo_pdf'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
# DGE analysis
library(DESeq2)          # to normalise RNAseq count data and perform DEG analysis
# general bioinformatics
library(edgeR)
library(biomaRt)         # to annotate the final gene list with common gene names
library(rtracklayer)     # to handling gene/exon coordinates data
library(GenomicFeatures) # to handling gene/exon coordinates data
# batch correction
library(sva) # >= v3.36.0
library(BatchQC)
library(preprocessCore)
# library(limma)
# plotting and data tidying
library(ggplot2)         # for making plots
library(dplyr)           # for handling data frames
library(stringr)         # for handling strings
library(pheatmap)        # to plot heatmap
library(scico)           # for vik colour map
library(dendsort)        # to sort dendrograms
library(gridExtra)
library(UpSetR)
library(ggthemes)        # italics in the figures
library(ggtext)          # italics in the figures
library(gridExtra)
# general convenience
library(here)
setwd(here())
tpm <- function(counts, lengths) {
return ((counts * 1e6) / (lengths * sum(counts/lengths,na.rm=TRUE)))
}
txdb <- makeTxDbFromGRanges(import('resources/dmel-all-r6.50.gtf'))
allTranscripts <- transcriptLengths(txdb)
allGeneIDs <- unique(allTranscripts$gene_id)
allGeneLengths <- as.data.frame(allTranscripts %>%
group_by(gene_id) %>%
summarize(max.tx_len = max(tx_len)) )
ensembl = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL",
dataset="dmelanogaster_gene_ensembl",
host = "https://oct2022.archive.ensembl.org") # update this to the latest: https://www.ensembl.org/Help/ArchiveRedirect
filters = listFilters(ensembl) # It defines filters in case you have a specific query
attributes = listAttributes(ensembl) #Defines the features that will be showed
dlist <- getBM(attributes=c('ensembl_gene_id', 'external_gene_name'), mart = ensembl)
rownames(dlist) <- dlist$ensembl_gene_id
dlist[1] <- NULL
write.table(dlist, file="resources/gene_names.txt", col.names=NA)
targets <- read.table("resources/targets_batched.txt", header=TRUE, sep="\t")
rawData <- NULL
# each column of rawData will contain the reads per gene of a sample
for (sampleID in targets$sampleID) {
if (file.exists( paste("input/dadasc/featurecounts/",
sampleID,
".featurecount", sep="") )){
fileContents <- read.table(paste("input/dadasc/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
} else {
fileContents <- read.table(paste("input/daoekd/featurecounts/",
sampleID, ".featurecount", sep=""),
sep="\t",
header=T)
}
rawData <- cbind(rawData, fileContents[,7])
}
colnames(rawData) <- paste(targets$Condition, targets$Replicate, targets$Batch, sep='_')
rownames(rawData) <- fileContents$Geneid
cpms <- cpm(rawData)
keep <- rowSums(cpms > 1) >= 3 # detected in at least 3 samples (out of 6, originally)
rawData <- rawData[keep,]
exptDesign = data.frame(
row.names = colnames(rawData),
condition = targets$Condition,
batch = targets$Batch)
exptObject <- DESeqDataSetFromMatrix(countData = rawData,
colData = exptDesign,
design = ~ batch + condition)
exptObject$condition <- factor(exptObject$condition, levels = c("Control", "DaKD", "DaOE", "DaDaOE", "ScOE"))
vsd_Object <- vst(exptObject, blind=TRUE)
plotPCA(vsd_Object)
assay(vsd_Object) <- limma::removeBatchEffect( assay(vsd_Object),
batch=vsd_Object$batch,
design=model.matrix(~condition, colData(vsd_Object)) )
plotPCA(vsd_Object)
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
h <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
h
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
h <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
#scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
h
# Compute the correlation values between samples of the matrix of transformed (and batch-corrected) counts
vsd_cor_Object <- cor(assay(vsd_Object))
# heatmap
# sort_hclust <- function(x) as.hclust(dendsort(as.dendrogram(x)))
# mat_cluster_cols <- hclust(dist(t(vsd_cor_Object)))
# mat_cluster_cols <- sort_hclust(mat_cluster_cols)
# mat_cluster_rows <- hclust(dist(vsd_cor_Object))
# mat_cluster_rows <- sort_hclust(mat_cluster_rows)
h <- pheatmap(# data
mat            = vsd_cor_Object,
annotation     = dplyr::select(exptDesign, condition),
#scale          = "row",
cellwidth      = 20,
cellheight     = 8,
# title
main           = 'RNAseq sample correlations',
fontsize       = 14,
# rows
#cluster_rows   = mat_cluster_rows,
#treeheight_row = 25, # default is 50
show_rownames  = FALSE,
fontsize_row   = 10,
#cutree_rows    = 5,
# cols
#cluster_cols   = mat_cluster_cols,
#treeheight_col = 25,
fontsize_col   = 10,
show_colnames  = TRUE,
angle_col      = 45,
#cutree_cols    = 5,
# values aes
color          = scico(255, palette='bamako'),
border_color   = NA,
legend_breaks  = c(0, 0.5, 1),
display_numbers = TRUE,
fontsize_number = 5,
number_color    = 'white'
)
h
