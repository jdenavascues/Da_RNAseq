mb.ratio = c(0.7, 0.3), # intersection bars, set bars
queries = list(
list(query = intersects,
params = list('da RNAi'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('da'),
#color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('da:da'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('scute'),
#color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T)
),
# sets
sets = names(up), keep.order= TRUE,
sets.bar.color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
# sets.bar.color = rep(c(cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
#                        cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]]),
#                      2),
set_size.show = TRUE,
set_size.numbers_size = 6,
set_size.scale_max = (ceiling(max(sapply( up , length)) / 100)*100)+50, # analog to plyr::round_any
# intersections
main.bar.color = 'gray50',
# c(rep("black", 6), rep('gray50', 8), rep("black", 6), rep('gray50', 7)),
group.by = 'sets',
order.by = c("degree", "freq"),
# labels
number.angles = 0,
mainbar.y.label = "Condition Intersections",
sets.x.label = "DEGs per condition",
text.scale = c(1.5, 1.3,  # c(ylab, yticks,
1.5, 1.3,  #   xlab, xticks,
1.3, 1.3), #   setlabs, barnumbers)
# connections
matrix.color = 'gray50',
shade.color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
point.size = 3,
line.size = 0.75
)
pdf(file=paste0(figdir,'/UpSet_plot_up_logfc2.pdf'),
width=8, height=4.5)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18)) #≥
dev.off()
svg(file=paste0(figdir,'/UpSet_plot_up_logfc2.svg'),
width=8, height=4.5)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
tiff(file=paste0(figdir,'/UpSet_plot_up_logfc2.tiff'),
width=8, height=4.5, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
png(file=paste0(figdir,'/UpSet_plot_up_logfc2.png'),
width=8, height=4.5, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
upsetplot
grid.text("Set intersections for DEGs fc≥4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
# up
upsetplot <- upset(
# data
fromList(  up  ),
mb.ratio = c(0.7, 0.3), # intersection bars, set bars
queries = list(
list(query = intersects,
params = list('da RNAi'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('da'),
#color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('da:da'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T),
list(query = intersects,
params = list('scute'),
#color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
active = T)
),
# sets
sets = names(up), keep.order= TRUE,
sets.bar.color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
# sets.bar.color = rep(c(cet_pal(n = 2, name = "cbd1", alpha = 1)[[2]],
#                        cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]]),
#                      2),
set_size.show = TRUE,
set_size.numbers_size = 6,
set_size.scale_max = (ceiling(max(sapply( up , length)) / 100)*100)+50, # analog to plyr::round_any
# intersections
main.bar.color = 'gray50',
# c(rep("black", 6), rep('gray50', 8), rep("black", 6), rep('gray50', 7)),
group.by = 'sets',
order.by = "degree",
# labels
number.angles = 0,
mainbar.y.label = "Condition Intersections",
sets.x.label = "DEGs per condition",
text.scale = c(1.5, 1.3,  # c(ylab, yticks,
1.5, 1.3,  #   xlab, xticks,
1.3, 1.3), #   setlabs, barnumbers)
# connections
matrix.color = 'gray50',
shade.color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[4]],
point.size = 3,
line.size = 0.75
)
pdf(file=paste0(figdir,'/UpSet_plot_up_logfc2.pdf'),
width=8, height=4.5)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18)) #≥
dev.off()
svg(file=paste0(figdir,'/UpSet_plot_up_logfc2.svg'),
width=8, height=4.5)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
tiff(file=paste0(figdir,'/UpSet_plot_up_logfc2.tiff'),
width=8, height=4.5, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
png(file=paste0(figdir,'/UpSet_plot_up_logfc2.png'),
width=8, height=4.5, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc>4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
dev.off()
upsetplot
grid.text("Set intersections for DEGs fc≥4", x = 0.65, y=0.95, gp=gpar(fontsize=18))
downsetplot <- upset(
# data
fromList(  down  ),
mb.ratio = c(0.7, 0.3), # intersection bars, set bars
queries = list(
list(query = intersects,
params = list('da RNAi'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[1]],
active = T),
list(query = intersects,
params = list('da'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[1]],
active = T),
list(query = intersects,
params = list('da:da'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[1]],
active = T),
list(query = intersects,
params = list('scute'),
color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[1]],
active = T)
),
# sets
sets = names(up), keep.order= TRUE,
sets.bar.color = cet_pal(n = 2, name = "cbd1", alpha = 1)[[1]],
set_size.show = TRUE,
set_size.numbers_size = 6,
set_size.scale_max = ceiling(max(sapply( down , length)) / 100)*100,
# intersections
main.bar.color = 'gray50',
group.by = 'sets',
order.by = "degree",
# labels
number.angles = 0,
mainbar.y.label = "Condition Intersections",
sets.x.label = "DEGs per condition",
text.scale = c(1.5, 1.3,  # c(ylab, yticks,
1.5, 1.3,  #   xlab, xticks,
1.3, 1.3), #   setlabs, barnumbers)
# connections
matrix.color = 'gray50',
shade.color = cet_pal(n = 5, name = "cbd1", alpha = 1)[[2]],
point.size = 3,
line.size = 0.75
)
pdf(file=paste0(figdir,'/UpSet_plot_down_logfc2.pdf'),
width=8, height=4.5)
upsetplot
grid.text("Fold change ≤ ¼", x = 0.65, y=0.95, gp=gpar(fontsize=18)) # ½
dev.off()
svg(file=paste0(figdir,'/UpSet_plot_down_logfc2.svg'),
width=8, height=4.5)
upsetplot
grid.text("Set intersections for DEGs fc<¼", x = 0.65, y=0.95, gp=gpar(fontsize=18)) # ½
dev.off()
tiff(file=paste0(figdir,'/UpSet_plot_down_logfc2.tiff'),
width=10, height=12, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc<¼", x = 0.65, y=0.95, gp=gpar(fontsize=18)) # ½
dev.off()
png(file=paste0(figdir,'/UpSet_plot_down_logfc2.png'),
width=10, height=12, units="in", res=300)
upsetplot
grid.text("Set intersections for DEGs fc<¼", x = 0.65, y=0.95, gp=gpar(fontsize=18)) # ½
dev.off()
downsetplot
grid.text("Set intersections for DEGs fc<¼", x = 0.65, y=0.95, gp=gpar(fontsize=18)) # ½
ggplot2::theme_set(ggpubr::theme_pubr(base_size=10))
knitr::opts_chunk$set(dev = 'png',
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"),
fig.path='integration/figures/', warning=FALSE, message=FALSE)
if (!require("librarian")) install.packages("librarian")
# data
librarian::shelf(readxl, dplyr, purrr, stringr, santoku, calibrate)
# graphics
librarian::shelf(cetcolor, ggplots2, ggpubr, ggtheme, ggtext, ggrepel)
# convenience
librarian::shelf(here)
setwd(here::here()) # to distinguish from dplyr::here()
figdir <- paste0(c(head(str_split(getwd(),'/')[[1]],-1),
paste0(tail(str_split(getwd(),'/')[[1]],1), '_figures')),
collapse='/')
dir.create(figdir, showWarnings = FALSE)
# experimental design and labels
targets <- readRDS('output/targets.RDS')
# DEG data
DaKD_deg <- readRDS('output/Control_vs_DaKD.RDS')
DaOE_deg <- readRDS('output/Control_vs_DaOE.RDS')
DaDaOE_deg <- readRDS('output/Control_vs_DaDaOE.RDS')
ScOE_deg <- readRDS('output/Control_vs_ScOE.RDS')
head(ScOE_deg, 1)
# first define the function
extract_regulated_sets2 <- function(list_of_degs, names_degs, fc_thresh=2, cols) {
# fc_thresh must be a positive number
# list_of_degs is a list of dataframes
# names_degs is a list of strings
# they must have the same length
reg_lvl <- paste0(' reg@log~2~FC≥', fc_thresh)
breaks <- brk_manual(c(-fc_thresh, fc_thresh), left_vec = c(FALSE, TRUE))
regulated_sets <- NULL
for (l in 1:length(list_of_degs)) {
degs_na <- dplyr::select(list_of_degs[[l]], all_of(cols))
# better not pass NAs to kiru
degs <- na.omit(degs_na)
# filter by log2FC threshold, create `reg`(ulated) col with up/down/non
degs$reg <-
kiru(
degs$log2FoldChange,
breaks = breaks,
extend = TRUE,
labels=c("down", "non", "up")
)
# filter by p-val
degs$reg <- as.character(degs$reg) # remove factor
x <- 1:nrow(degs)
degs$reg <- ifelse(degs[x,'padj']<0.05, degs[x,'reg'], 'non')
# recover NAs as non-regulataed
added_nas <- degs_na[!(rownames(degs_na) %in% rownames(na.omit(degs_na))),]
added_nas$reg <- 'non'
degs <- rbind(degs, added_nas)
# store reg status
degs[ , names_degs[[l]] ] <- degs$reg
regulated_sets[[l]] <- dplyr::select(degs, c(ensemblGeneID, names_degs[[l]]) )
}
regulated_sets <- purrr::reduce(regulated_sets, full_join, by='ensemblGeneID')
rownames(regulated_sets) <- regulated_sets$ensemblGeneID
regulated_sets <- dplyr::select(regulated_sets, -ensemblGeneID)
return(regulated_sets)
}
# now use the function
list_of_degs <- list('kd'=DaKD_deg, 'da'=DaOE_deg,
'dada'=DaDaOE_deg, 'sc'=ScOE_deg)
names_degs <- list('DaKD','DaOE','DaDaOE','ScOE')
cols.oi <- c('log2FoldChange', 'padj', 'baseMean',
'gene_symbol', 'ensemblGeneID')
fc_thresh <- 2
regs <- extract_regulated_sets2(list_of_degs, names_degs, fc_thresh=fc_thresh, cols=cols.oi)
# attach the results to the DEG data frame for each condition
DaKD_deg$reg <- regs$DaKD
DaOE_deg$reg <- regs$DaOE
DaDaOE_deg$reg <- regs$DaDaOE
ScOE_deg$reg <- regs$ScOE
genes_of_interest <- read_excel('resources/genes_of_interest.xlsx')
ggmaplot2 <- function(deg, goi_list, fc_thresh = 1.5,
md_label='*genotype^—^*', repulsion) {
# deg is the output of DESeq2 with an added column of gene symbols
# gene.symbols is that column
# standard MA plot with `ggpubr`, using the CBD1 palette from `cetcolor`
ma <- ggmaplot(
deg,
fdr = 0.05,
fc = fc_thresh,
genenames = deg$gene_symbols,
size = 2,
alpha = 0.5,
seed = NA,
font.label = c(16, "bold", "black"),
label.rectangle = FALSE,
palette = c(cet_pal(n = 3, name = "cbd1", alpha = 1)[3], # "#A89008"
cet_pal(n = 3, name = "cbd1", alpha = 1)[1], # "#3A90FE"
"#AAAAAA"),
top = 0,
main = NULL,
xlab = "log~2~(mean expression)",
ylab = "log~2~(fold change)",
ggtheme = theme_linedraw(),
legend = 'top'
)
annotations <- data.frame(
xpos = floor(min(ggplot_build(ma)$layout$panel_params[[1]]$x.range)),
ypos = ceiling(max(abs(ggplot_build(ma)$layout$panel_params[[1]]$y.range))),
annotateText = md_label,
hjustvar = 0,
vjustvar = 1)
return(ma +
# mark special genes if upreg
geom_text_repel(data = deg %>% filter(gene_symbol %in% goi_list$gene_symbol &
log2FoldChange > 0),
aes(x = log2(baseMean),
y = log2FoldChange,
label = gene_symbol,
segment.square  = FALSE,
segment.inflect = TRUE),
color         = '#6E5C03', # ==hue, <ligthness than than "#A89008"
segment.alpha = 0.8,
segment.linetype = 3,
hjust = 0,
# positioning
box.padding   = repulsion$box.padding,
point.padding = repulsion$point.padding,
nudge_x       = repulsion$nudge_x.up,
nudge_y       = repulsion$nudge_y.up,
force         = repulsion$force,
force_pull    = repulsion$force_pull,
max.overlaps  = Inf,
xlim          = repulsion$xlims.up,    # NA repels from edges
ylim          = repulsion$ylims.up) +
# mark special genes if downreg
geom_text_repel(data = deg %>% filter(gene_symbol %in% goi_list$gene_symbol &
log2FoldChange < 0),
aes(x = log2(baseMean),
y = log2FoldChange,
label = gene_symbol,
segment.square  = FALSE,
segment.inflect = TRUE),
color         = '#0565AF', # ==hue, <ligthness than "#3A90FE"
segment.alpha = 0.8,
segment.linetype = 3,
hjust = 0,
# positioning
box.padding   = repulsion$box.padding,
point.padding = repulsion$point.padding,
nudge_x       = repulsion$nudge_x.dn,
nudge_y       = repulsion$nudge_y.dn,
force         = repulsion$force,
force_pull    = repulsion$force_pull,
max.overlaps  = Inf,
xlim          = repulsion$xlims.dn,             # NA repels from edges
ylim          = repulsion$ylims.dn) +
# genotype label
geom_richtext(
data = annotations,
aes(x = xpos,y = ypos,
hjust = hjustvar, vjust = vjustvar,
label = annotateText,
fontface = 'bold',
size = 9),
fill = NA,
label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt"),
label.margin = grid::unit(rep(0, 4), "pt")
) +
# legend
guides(size = 'none') +
# apply markdown formatting, etc
theme(# markdown
axis.title.x = element_markdown(size = 14, face = 'bold'),
axis.title.y = element_markdown(size = 14, face = 'bold'),
axis.text = element_text(size = 10),
# grid and panel
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
panel.grid = element_blank(),
# legend
legend.margin = margin(b = -10),
legend.key.size = unit(1.2, 'cm'),
legend.text = element_text(size = 12, face = 'bold')
)
)
}
# genes of interest dysregulated in this condition
goi_kd <- DaKD_deg %>% dplyr::filter(
gene_symbol %in% genes_of_interest$gene_symbol &
reg!='non' &
abs(log2FoldChange)>2 &
padj<0.05
)
repulsion <- list(box.padding = 0.8,
point.padding = 0.5,
nudge_x = 3,
nudge_y = 2,
force = 2,
force_pull = 0.05,
xlims.up = c(6, NA),
ylims.up = c(6, NA),
xlims.dn = c(6, NA),
ylims.dn = c(6, NA))
ggmaplot2 (deg = DaKD_deg,
fc_thresh = fc_thresh,
goi_list = goi_kd,
md_label = '*esg > da^RNAi^*',
repulsion = repulsion)
ggsave('MA_daKD.pdf', plot = last_plot(), device = 'pdf',
path = figdir, dpi = 300)
ggsave('MA_daKD.svg', plot = last_plot(), device = 'svg',
path = figdir, dpi = 300)
ggsave('MA_daKD.png', plot = last_plot(), device = png,
path = figdir, dpi = 300)
# genes of interest dysregulated in this condition
goi_da <- DaOE_deg %>% dplyr::filter(
gene_symbol %in% genes_of_interest$gene_symbol &
reg!='non' &
abs(log2FoldChange)>2 &
padj<0.05
)
repulsion <- list(box.padding = 0.8,
point.padding = 0.5,
force = 2,
force_pull = 0.05,
nudge_x.up = 3,
nudge_y.up = 2,
xlims.up = c(5, NA),
ylims.up = c(7, NA),
nudge_x.dn = 3,
nudge_y.dn = -2,
xlims.dn = c(12, NA),
ylims.dn = c(NA, -3))
ggmaplot2(deg = DaOE_deg,
fc_thresh = fc_thresh,
goi_list = goi_da,
md_label = '*esg > da*',
repulsion = repulsion)
suppressMessages(ggsave('MA_daOE.pdf', plot = last_plot(), device = 'pdf',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_daOE.svg', plot = last_plot(), device = 'svg',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_daOE.png', plot = last_plot(), device = png,
path = figdir, dpi = 300))
# genes of interest dysregulated in this condition
goi_dada <- DaDaOE_deg %>% dplyr::filter(
gene_symbol %in% genes_of_interest$gene_symbol &
reg!='non' &
abs(log2FoldChange)>2 &
padj<0.05
)
repulsion <- list(box.padding = 0.8,
point.padding = 0.5,
force = 2,
force_pull = 0.1,
nudge_x.up = 3,
nudge_y.up = 2,
xlims.up = c(5, NA),
ylims.up = c(7, NA),
nudge_x.dn = 5,
nudge_y.dn = -3,
xlims.dn = c(10, NA),
ylims.dn = c(NA, -1))
ggmaplot2(deg = DaDaOE_deg,
fc_thresh = fc_thresh,
goi_list = goi_dada,
md_label = '*esg > da:da*',
repulsion = repulsion)
suppressMessages(ggsave('MA_dadaOE.pdf', plot = last_plot(), device = 'pdf',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_dadaOE.svg', plot = last_plot(), device = 'svg',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_dadaOE.png', plot = last_plot(), device = png,
path = figdir, dpi = 300))
# genes of interest dysregulated in this condition
goi_sc <- ScOE_deg %>% dplyr::filter(
gene_symbol %in% genes_of_interest$gene_symbol &
reg!='non' &
abs(log2FoldChange)>2 &
padj<0.05
)
repulsion <- list(box.padding = 0.8,
point.padding = 0.5,
force = 2,
force_pull = 0.1,
nudge_x.up = 3,
nudge_y.up = 2,
xlims.up = c(5, NA),
ylims.up = c(7, NA),
nudge_x.dn = 5,
nudge_y.dn = -3,
xlims.dn = c(NA, NA),
ylims.dn = c(NA, -5))
ggmaplot2(deg = ScOE_deg,
fc_thresh = fc_thresh,
goi_list = goi_sc,
md_label = '*esg > scute*',
repulsion = repulsion)
suppressMessages(ggsave('MA_ScOE.pdf', plot = last_plot(), device = 'pdf',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_ScOE.svg', plot = last_plot(), device = 'svg',
path = figdir, dpi = 300))
suppressMessages(ggsave('MA_ScOE.png', plot = last_plot(), device = png,
path = figdir, dpi = 300))
