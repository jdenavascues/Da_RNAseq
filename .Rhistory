high = cet_pal(3, name='cbd1')[1]) +
theme(plot.title = element_markdown(size=rel(1.15)),
panel.grid = element_blank(),
axis.text.y = element_text(size=8, lineheight=0.5))
suppressWarnings(print(up))
suppressWarnings(print(down))
# using `clusterProfiler` and `enrichplot`
# select reg set
dadaOE_up <- make_degset(DaDaOE_deg, up=TRUE, fc_thresh=1.5)
# ORA
dadaOE_up_eGO <- enrichGO(gene         = dadaOE_up$gene_symbol,
OrgDb         = org.Dm.eg.db,
keyType       = 'SYMBOL',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
# with down genes
dadaOE_dn <- make_degset(DaDaOE_deg, up=FALSE, fc_thresh=1.5)
dadaOE_dn_eGO <- enrichGO(gene         = dadaOE_dn$gene_symbol,
OrgDb         = org.Dm.eg.db,
keyType       = 'SYMBOL',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
# plot
up <- dotplot(dadaOE_up_eGO, showCategory=30, label_format=40) +
ggtitle("Over-represented GO terms — genes **up** in *esg > da:da*") +
scale_colour_gradient(low = cet_pal(3, name='cbd1')[2],
high = cet_pal(3, name='cbd1')[3]) +
force_panelsizes(rows = unit(3, "in"), cols = unit(2, "in")) +
theme(plot.title = element_markdown(),
plot.title.position = 'plot',
panel.grid = element_blank(),
axis.text.y = element_text(size=9))
suppressWarnings(print(up))
# using `clusterProfiler` and `enrichplot`
# select reg set
scOE_up <- make_degset(ScOE_deg, up=TRUE, fc_thresh=1.5)
# ORA
scOE_up_eGO <- enrichGO(gene         = scOE_up$gene_symbol,
OrgDb         = org.Dm.eg.db,
keyType       = 'SYMBOL',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
# with down genes
scOE_dn <- make_degset(ScOE_deg, up=FALSE, fc_thresh=1.5)
scOE_dn_eGO <- enrichGO(gene         = scOE_dn$gene_symbol,
OrgDb         = org.Dm.eg.db,
keyType       = 'SYMBOL',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
# plot
up <- dotplot(scOE_up_eGO, showCategory=30, label_format=60) +
ggtitle("Over-represented GO terms — genes **up** in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='cbd1')[2],
high = cet_pal(3, name='cbd1')[3]) +
theme(plot.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9))
down <- dotplot(scOE_dn_eGO, showCategory=30, label_format=60) +
ggtitle("Over-represented GO terms — genes **down** in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='cbd1')[2],
high = cet_pal(3, name='cbd1')[1]) +
theme(plot.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=8, lineheight=0.5))
suppressWarnings(print(up))
suppressWarnings(print(down))
# using `clusterProfiler` and `enrichplot`
# select reg set
daKD_rank <- make_degrank(DaKD_deg, mode='log2fc')
# GSEA
daKD_GSEgo <- gseGO(geneList=daKD_rank,
keyType = 'SYMBOL',
OrgDb=org.Dm.eg.db,
minGSSize    = 15,
maxGSSize    = 1000,
pvalueCutoff = 0.05,
eps = 0,
verbose=F)
# get the logP values instead of padj
daKD_GSEgo_log <- daKD_GSEgo
daKD_GSEgo_log@result$p.adjust <- -log10(daKD_GSEgo_log@result$p.adjust) # use @slot and $column to assign
# to subset the data to the highest NES values
#daKD_GSEgo_log@result <- subset(daKD_GSEgo_log@result, abs(NES)>1.8)
# to subset the data to the lowest p-values:
number_of_terms <- 30
cutoff <- rev(rev(sort(daKD_GSEgo_log$p.adjust))[1:number_of_terms])[1]
daKD_GSEgo_log@result <- subset(daKD_GSEgo_log@result, p.adjust>=cutoff)
# to control colour of GO terms according to enrichment or depletion
d <- ifelse(sort(daKD_GSEgo_log$NES) > 0, cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daKD_GSEgo_log,
x='NES',
showCategory=number_of_terms,
label_format=60,
) +
ggtitle("Enriched/depleted GO terms in *esg > da^RNAi^*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
suppressWarnings(print(gsep))
# using `clusterProfiler` and `enrichplot`
# select reg set
daOE_rank <- make_degrank(DaOE_deg, mode='log2fc')
# GSEA
daOE_GSEgo <- gseGO(geneList=daOE_rank,
keyType = 'SYMBOL',
OrgDb=org.Dm.eg.db,
minGSSize    = 15,
maxGSSize    = 1000,
pvalueCutoff = 0.05,
eps = 0,
verbose=F)
# get the logP values instead of padj
daOE_GSEgo_log <- daOE_GSEgo
daOE_GSEgo_log@result$p.adjust <- -log10(daOE_GSEgo_log@result$p.adjust) # use @slot and $column to assign
# to subset the data to the highest NES values
#daOE_GSEgo_log@result <- subset(daOE_GSEgo_log@result, abs(NES)>1.8)
# to subset the data to the lowest p-values:
number_of_terms <- 30
cutoff <- rev(rev(sort(daOE_GSEgo_log$p.adjust))[1:number_of_terms])[1]
daOE_GSEgo_log@result <- subset(daOE_GSEgo_log@result, p.adjust>=cutoff)
# to control colour of GO terms according to enrichment or depletion
d <- ifelse(sort(daOE_GSEgo_log$NES) > 0, cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daOE_GSEgo_log,
x='NES',
showCategory=number_of_terms,
label_format=60,
) +
ggtitle("Enriched/depleted GO terms in *esg > da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
suppressWarnings(print(gsep))
# using `clusterProfiler` and `enrichplot`
# select reg set
dadaOE_rank <- make_degrank(DaDaOE_deg, mode='log2fc')
# GSEA
dadaOE_GSEgo <- gseGO(geneList=dadaOE_rank,
keyType = 'SYMBOL',
OrgDb=org.Dm.eg.db,
minGSSize    = 15,
maxGSSize    = 1000,
pvalueCutoff = 0.05,
eps = 0,
verbose=F)
# get the logP values instead of padj
dadaOE_GSEgo_log <- dadaOE_GSEgo
dadaOE_GSEgo_log@result$p.adjust <- -log10(dadaOE_GSEgo_log@result$p.adjust) # use @slot and $column to assign
# to subset the data to the highest NES values
#dadaOE_GSEgo_log@result <- subset(dadaOE_GSEgo_log@result, abs(NES)>1.8)
# to subset the data to the lowest p-values:
number_of_terms <- 30
cutoff <- rev(rev(sort(dadaOE_GSEgo_log$p.adjust))[1:number_of_terms])[1]
dadaOE_GSEgo_log@result <- subset(dadaOE_GSEgo_log@result, p.adjust>=cutoff)
# to control colour of GO terms according to enrichment or depletion
d <- ifelse(sort(dadaOE_GSEgo_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(dadaOE_GSEgo_log,
x='NES',
showCategory=number_of_terms,
label_format=50,
) +
ggtitle("Enriched/depleted GO terms in *esg > da:da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
#coord_fixed(ratio=0.8) +
force_panelsizes(rows = unit(3.5,'in'), cols = unit(4,'in')) +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=7, lineheight=0.7, colour=d)
)
#gsep$coordinates$ratio <- 0.01
suppressWarnings(print(gsep))
# using `clusterProfiler` and `enrichplot`
# select reg set
scOE_rank <- make_degrank(ScOE_deg, mode='log2fc')
# GSEA
scOE_GSEgo <- gseGO(geneList=scOE_rank,
keyType = 'SYMBOL',
OrgDb=org.Dm.eg.db,
minGSSize    = 15,
maxGSSize    = 1000,
pvalueCutoff = 0.05,
nPermSimple = 10000,
eps = 0,
verbose=F)
# get the logP values instead of padj
scOE_GSEgo_log <- scOE_GSEgo
scOE_GSEgo_log@result$p.adjust <- -log10(scOE_GSEgo_log@result$p.adjust) # use @slot and $column to assign
# to subset the data to the highest NES values
#scOE_GSEgo_log@result <- subset(scOE_GSEgo_log@result, abs(NES)>1.8)
# to subset the data to the lowest p-values:
number_of_terms <- 30
cutoff <- rev(rev(sort(scOE_GSEgo_log$p.adjust))[1:number_of_terms])[1]
scOE_GSEgo_log@result <- subset(scOE_GSEgo_log@result, p.adjust>=cutoff)
# to control colour of GO terms according to enrichment or depletion
d <- ifelse(sort(scOE_GSEgo_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(scOE_GSEgo_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
suppressWarnings(print(gsep))
import_from_gmx <- function(gmxfile) {
# read a GMX file and turn it into a df input appropriate for `clusterProfiler`
df <- read.csv(gmxfile, header=TRUE, sep='\t')
# remove 'na's in 1st row
df <- df[ !df[1]=='na', ]
# pivot
df <- df %>% pivot_longer(cols = everything(),
names_to = 'term',
values_to = 'gene')
# remove rows with no genes
df <- df %>% subset(gene != '')
df <- df %>% mutate(gene = str_replace(gene, "FBGN", "FBgn"),
term = str_replace(term, ".only", "-only"))
df <- df %>% mutate(term = str_replace(term, "\\.", " "))
return(df)
}
dutta_gmx <- import_from_gmx(paste0(getwd(),'/resources/Dutta.gmx'))
daKD_gse_dutta <- GSEA(geneList=make_degrank(DaKD_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
daKD_gse_dutta_log <- daKD_gse_dutta
daKD_gse_dutta_log@result$p.adjust <- -log10(daKD_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(daKD_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daKD_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da^RNAi^*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
daOE_gse_dutta <- GSEA(geneList=make_degrank(DaOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
daOE_gse_dutta_log <- daOE_gse_dutta
daOE_gse_dutta_log@result$p.adjust <- -log10(daOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(daOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(daOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
dadaOE_gse_dutta <- GSEA(geneList=make_degrank(DaDaOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
dadaOE_gse_dutta_log <- dadaOE_gse_dutta
dadaOE_gse_dutta_log@result$p.adjust <- -log10(dadaOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(dadaOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(dadaOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > da:da*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
scOE_gse_dutta <- GSEA(geneList=make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID'),
exponent = 1,
minGSSize = 1,
maxGSSize = 1000,
eps = 0,
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
TERM2GENE = dutta_gmx,
TERM2NAME = NA,
verbose = TRUE,
seed = FALSE,
by = "fgsea")
scOE_gse_dutta_log <- scOE_gse_dutta
scOE_gse_dutta_log@result$p.adjust <- -log10(scOE_gse_dutta_log@result$p.adjust) # use @slot and $column to assign
d <- ifelse(sort(scOE_gse_dutta_log$NES) > 0,
cet_pal(2, name='cbd1')[2], cet_pal(2, name='cbd1')[1])
# plot
gsep <- dotplot(scOE_gse_dutta_log,
x='NES',
showCategory=number_of_terms,
label_format=60
) +
ggtitle("Enriched/depleted GO terms in *esg > scute*") +
scale_colour_gradient(low = cet_pal(3, name='d2')[2],
high = cet_pal(3, name='d2')[3]) +
labs(color = '-log~10~(*p*)') +
theme(plot.title = element_markdown(),
plot.title.position = 'panel',
legend.title = element_markdown(),
panel.grid = element_blank(),
axis.text.y = element_text(size=9, colour=d))
print(gsep)
scuter <- data.frame(l2fc=make_degrank(ScOE_deg, mode='log2fc', key='ensemblGeneID')) %>%
mutate(index=row_number(), id=row.names(.))
labels <- ScOE_deg %>%
select(ensemblGeneID, log2FoldChange, gene_symbol) %>%
slice_max(log2FoldChange,n=5) %>%
mutate(index=row_number())
p <- ggplot(scuter, aes(x=index, y=l2fc))
p + geom_point(alpha=0.2) +
geom_text_repel(labels, mapping=aes(label = gene_symbol, x=index, y=log2FoldChange),
point.padding=0.5, box.padding=1, nudge_x = 1500)
# the gsea objects generated from clusterProfiler are:
# daKD_gse_dutta, daOE_gse_dutta, dadaOE_gse_dutta, scOE_gse_dutta
daKD_gse_dutta@organism <- 'dm'
daOE_gse_dutta@organism <- 'dm'
dadaOE_gse_dutta@organism <- 'dm'
scOE_gse_dutta@organism <- 'dm'
daKD_gse_dutta_gtr   <- importCP(daKD_gse_dutta, type = 'gsea')
daOE_gse_dutta_gtr   <- importCP(daOE_gse_dutta, type = 'gsea')
dadaOE_gse_dutta_gtr <- importCP(dadaOE_gse_dutta, type = 'gsea')
scOE_gse_dutta_gtr   <- importCP(scOE_gse_dutta, type = 'gsea')
plotGSEA(scOE_gse_dutta_gtr,
plot_type = "classic",
show_pathway = scOE_gse_dutta_gtr$gsea_df$ID[1:2],
#show_gene = scOE_gse_dutta_gtr$genelist[seq(1, by=10, length=2),'ID']
show_gene = c('da', 'sc', 'emc', 'pros', 'poxn', 'Myo31DF', 'ck', 'nub', 'pdm2', 'esg', 'Dl'))
# extract data from all gse objects into a single df
gseCP_summarise <- function(gmx, gseCP_list, conditions, dvar) {
# gmx is a df containing the data of a GMX file
# gseCP_list is a list of clusterProfiler GSEA objects
# conditions is a list with the namees of the experimental conditions for those GSEA objects
# dvar (data variable) for "name injection" with <data-masking> tidyverse functions
if ( !(dvar %in% c('NES', 'p.adjust')) ) {
stop("The argument `dvar` must be one of `NES` and `p.adjust`")
}
# create template with all term IDs (clusterProfiler trims those that do not give results)
empty <- data.frame(rep(0, length(unique(gmx$term))),
unique(gmx$term))
names(empty) <- c(dvar, 'ID')
# create function to merge `empty` with GSE object data for each term ID
gsemerge <- function(gse, empty, dvar) {
return(
# full join selecting injecting dvar with
# embracing syntax {{}}
# bangbang !! operator with as.name function
# glue syntax "{}"
# dynamic assignment :=
full_join(select(gse, all_of({{dvar}}), ID), empty, by='ID') %>%
mutate( "{dvar}" := !!as.name(paste0(dvar,".x")) ) %>%
select( {{dvar}}, ID )
)
}
# purr::map to convert the gse_list from S4 objects to their @result slots
gseCP_list <- map(gseCP_list, \(x) x@result)
# apply gsemerge
gseCP_list <- lapply( gseCP_list, \(x) gsemerge(x, empty, dvar) )
# name them to associate conditions with the data
names(gseCP_list) <- conditions
#
df <- gseCP_list %>%
# change the colnames to condition names
imap(.x = ., ~ set_names(.x, c(.y, "ID"))) %>%
# merge them all together
reduce(full_join, by='ID') %>%
# tidy up all dvar values in one col
pivot_longer(cols=-c('ID'), names_to = "condition", values_to = dvar)
return(df)
}
gse_list <- list(daKD_gse_dutta, daOE_gse_dutta,
dadaOE_gse_dutta, scOE_gse_dutta)
conditions <- c('*esg > da^RNAi^*', '*esg > da*', '*esg > da:da*', '*esg > scute*')
NES.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, 'NES')
# extract data from all gse objects into a single df
gseCP_summarise <- function(gmx, gseCP_list, conditions, dvar) {
# gmx is a df containing the data of a GMX file
# gseCP_list is a list of clusterProfiler GSEA objects
# conditions is a list with the namees of the experimental conditions for those GSEA objects
# dvar (data variable) for "name injection" with <data-masking> tidyverse functions
if ( !(dvar %in% c('NES', 'p.adjust')) ) {
stop("The argument `dvar` must be one of `NES` and `p.adjust`")
}
# create template with all term IDs (clusterProfiler trims those that do not give results)
empty <- data.frame(rep(0, length(unique(gmx$term))),
unique(gmx$term))
names(empty) <- c(dvar, 'ID')
# create function to merge `empty` with GSE object data for each term ID
gsemerge <- function(gse, empty, dvar) {
return(
# full join selecting injecting dvar with
# embracing syntax {{}}
# bangbang !! operator with as.name function
# glue syntax "{}"
# dynamic assignment :=
full_join(select(gse, all_of({{dvar}}), ID), empty, by='ID') %>%
mutate( "{dvar}" := !!as.name(paste0(dvar,".x")) ) %>%
select( {{dvar}}, ID )
)
}
# purr::map to convert the gse_list from S4 objects to their @result slots
gseCP_list <- map(gseCP_list, \(x) x@result)
# apply gsemerge
gseCP_list <- lapply( gseCP_list, \(x) gsemerge(x, empty, dvar) )
# name them to associate conditions with the data
names(gseCP_list) <- conditions
#
df <- gseCP_list %>%
# change the colnames to condition names
imap(.x = ., ~ set_names(.x, c(.y, "ID"))) %>%
# merge them all together
purrr::reduce(full_join, by='ID') %>%
# tidy up all dvar values in one col
pivot_longer(cols=-c('ID'), names_to = "condition", values_to = dvar)
return(df)
}
gse_list <- list(daKD_gse_dutta, daOE_gse_dutta,
dadaOE_gse_dutta, scOE_gse_dutta)
conditions <- c('*esg > da^RNAi^*', '*esg > da*', '*esg > da:da*', '*esg > scute*')
NES.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, 'NES')
padj.df <- gseCP_summarise(dutta_gmx, gse_list, conditions, 'p.adjust')
nes.heatmap <- function(NES.df, padj.df) {
}
ggplot(NES.df, aes(x=ID, y=condition)) +
geom_tile(aes(fill=NES), width=1) +
scale_fill_gradientn(colours=cet_pal(256, name='cbd1')) +
geom_point(data=padj.df,
aes(x=ID, y=condition, colour=-log10(p.adjust)),
size=5) +
scale_colour_gradientn(colours=cet_pal(256, name='cbd1')) +
coord_equal() +
theme_bw() +
ggtitle("Normalised Enrichment Scores") +
theme(axis.text.y = element_markdown(),
axis.title = element_blank(),
panel.grid = element_blank(),
axis.ticks = element_blank())
